(function (e, t, n) { (function (e) { "use strict"; if (typeof define === "function" && define.amd) { define(["jquery"], e) } else if (jQuery && !jQuery.fn.qtip) { e(jQuery) } })(function (r) { "use strict"; function I(e, t, n, i) { this.id = n; this.target = e; this.tooltip = o; this.elements = { target: e }; this._id = T + "-" + n; this.timers = { img: {} }; this.options = t; this.plugins = {}; this.cache = { event: {}, target: r(), disabled: s, attr: i, onTooltip: s, lastClass: "" }; this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = s } function q(e) { return e === o || r.type(e) !== "object" } function R(e) { return !(r.isFunction(e) || e && e.attr || e.length || r.type(e) === "object" && (e.jquery || e.then)) } function U(e) { var t, n, u, a; if (q(e)) { return s } if (q(e.metadata)) { e.metadata = { type: e.metadata } } if ("content" in e) { t = e.content; if (q(t) || t.jquery || t.done) { t = e.content = { text: n = R(t) ? s : t } } else { n = t.text } if ("ajax" in t) { u = t.ajax; a = u && u.once !== s; delete t.ajax; t.text = function (e, t) { var i = n || r(this).attr(t.options.content.attr) || "Loading...", s = r.ajax(r.extend({}, u, { context: t })).then(u.success, o, u.error).then(function (e) { if (e && a) { t.set("content.text", e) } return e }, function (e, n, r) { if (t.destroyed || e.status === 0) { return } t.set("content.text", n + ": " + r) }); return !a ? (t.set("content.text", i), s) : i } } if ("title" in t) { if (r.isPlainObject(t.title)) { t.button = t.title.button; t.title = t.title.text } if (R(t.title || s)) { t.title = s } } } if ("position" in e && q(e.position)) { e.position = { my: e.position, at: e.position } } if ("show" in e && q(e.show)) { e.show = e.show.jquery ? { target: e.show } : e.show === i ? { ready: i } : { event: e.show } } if ("hide" in e && q(e.hide)) { e.hide = e.hide.jquery ? { target: e.hide } : { event: e.hide } } if ("style" in e && q(e.style)) { e.style = { classes: e.style } } r.each(x, function () { this.sanitize && this.sanitize(e) }); return e } function z(e, t) { var n = 0, r, i = e, s = t.split("."); while (i = i[s[n++]]) { if (n < s.length) { r = i } } return [r || e, s.pop()] } function W(e, t) { var n, r, i; for (n in this.checks) { for (r in this.checks[n]) { if (i = (new RegExp(r, "i")).exec(e)) { t.push(i); if (n === "builtin" || this.plugins[n]) { this.checks[n][r].apply(this.plugins[n] || this, t) } } } } } function J(e) { return k.concat("").join(e ? "-" + e + " " : " ") } function K(e, t) { if (t > 0) { return setTimeout(r.proxy(e, this), t) } else { e.call(this) } } function Q(e) { if (this.tooltip.hasClass(P)) { return } clearTimeout(this.timers.show); clearTimeout(this.timers.hide); this.timers.show = K.call(this, function () { this.toggle(i, e) }, this.options.show.delay) } function G(e) { if (this.tooltip.hasClass(P) || this.destroyed) { return } var t = r(e.relatedTarget), n = t.closest(L)[0] === this.tooltip[0], i = t[0] === this.options.show.target[0]; clearTimeout(this.timers.show); clearTimeout(this.timers.hide); if (this !== t[0] && this.options.position.target === "mouse" && n || this.options.hide.fixed && /mouse(out|leave|move)/.test(e.type) && (n || i)) { try { e.preventDefault(); e.stopImmediatePropagation() } catch (o) { } return } this.timers.hide = K.call(this, function () { this.toggle(s, e) }, this.options.hide.delay, this) } function Y(e) { if (this.tooltip.hasClass(P) || !this.options.hide.inactive) { return } clearTimeout(this.timers.inactive); this.timers.inactive = K.call(this, function () { this.hide(e) }, this.options.hide.inactive) } function Z(e) { if (this.rendered && this.tooltip[0].offsetWidth > 0) { this.reposition(e) } } function et(e, n, i) { r(t.body).delegate(e, (n.split ? n : n.join("." + T + " ")) + "." + T, function () { var e = b.api[r.attr(this, C)]; e && !e.disabled && i.apply(e, arguments) }) } function tt(e, n, u) { var a, f, l, c, h, p = r(t.body), d = e[0] === t ? p : e, v = e.metadata ? e.metadata(u.metadata) : o, m = u.metadata.type === "html5" && v ? v[u.metadata.name] : o, g = e.data(u.metadata.name || "qtipopts"); try { g = typeof g === "string" ? r.parseJSON(g) : g } catch (y) { } c = r.extend(i, {}, b.defaults, u, typeof g === "object" ? U(g) : o, U(m || v)); f = c.position; c.id = n; if ("boolean" === typeof c.content.text) { l = e.attr(c.content.attr); if (c.content.attr !== s && l) { c.content.text = l } else { return s } } if (!f.container.length) { f.container = p } if (f.target === s) { f.target = d } if (c.show.target === s) { c.show.target = d } if (c.show.solo === i) { c.show.solo = f.container.closest("body") } if (c.hide.target === s) { c.hide.target = d } if (c.position.viewport === i) { c.position.viewport = f.container } f.container = f.container.eq(0); f.at = new E(f.at, i); f.my = new E(f.my); if (e.data(T)) { if (c.overwrite) { e.qtip("destroy", true) } else if (c.overwrite === s) { return s } } e.attr(N, n); if (c.suppress && (h = e.attr("title"))) { e.removeAttr("title").attr(B, h).attr("title", "") } a = new I(e, c, n, !!l); e.data(T, a); return a } function ht(e) { return e.charAt(0).toUpperCase() + e.slice(1) } function vt(e, t) { var r = t.charAt(0).toUpperCase() + t.slice(1), i = (t + " " + dt.join(r + " ") + r).split(" "), s, o, u = 0; if (pt[t]) { return e.css(pt[t]) } while (s = i[u++]) { if ((o = e.css(s)) !== n) { return pt[t] = s, o } } } function mt(e, t) { return Math.ceil(parseFloat(vt(e, t))) } function Et(e, t) { this._ns = "tip"; this.options = t; this.offset = t.offset; this.size = [t.width, t.height]; this.init(this.qtip = e) } function Ct(e, t) { this.options = t; this._ns = "-modal"; this.init(this.qtip = e) } function At(e, t) { this._ns = "ie6"; this.init(this.qtip = e) } var i = true, s = false, o = null, u = "x", a = "y", f = "width", l = "height", c = "top", h = "left", p = "bottom", d = "right", v = "center", m = "flip", g = "flipinvert", y = "shift", b, w, E, S, x = {}, T = "qtip", N = "data-hasqtip", C = "data-qtip-id", k = ["ui-widget", "ui-tooltip"], L = "." + T, A = "click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "), O = T + "-fixed", M = T + "-default", _ = T + "-focus", D = T + "-hover", P = T + "-disabled", H = "_replacedByqTip", B = "oldtitle", j, F = { ie: function () { for (var e = 4, n = t.createElement("div") ; (n.innerHTML = "<!--[if gt IE " + e + "]><i></i><![endif]-->") && n.getElementsByTagName("i")[0]; e += 1) { } return e > 4 ? e : NaN }(), iOS: parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ""])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", "")) || s }; w = I.prototype; w._when = function (e) { return r.when.apply(r, e) }; w.render = function (e) { if (this.rendered || this.destroyed) { return this } var t = this, n = this.options, o = this.cache, u = this.elements, a = n.content.text, f = n.content.title, l = n.content.button, c = n.position, h = "." + this._id + " ", p = [], d; r.attr(this.target[0], "aria-describedby", this._id); o.posClass = this._createPosClass((this.position = { my: c.my, at: c.at }).my); this.tooltip = u.tooltip = d = r("<div/>", { id: this._id, "class": [T, M, n.style.classes, o.posClass].join(" "), width: n.style.width || "", height: n.style.height || "", tracking: c.target === "mouse" && c.adjust.mouse, role: "alert", "aria-live": "polite", "aria-atomic": s, "aria-describedby": this._id + "-content", "aria-hidden": i }).toggleClass(P, this.disabled).attr(C, this.id).data(T, this).appendTo(c.container).append(u.content = r("<div />", { "class": T + "-content", id: this._id + "-content", "aria-atomic": i })); this.rendered = -1; this.positioning = i; if (f) { this._createTitle(); if (!r.isFunction(f)) { p.push(this._updateTitle(f, s)) } } if (l) { this._createButton() } if (!r.isFunction(a)) { p.push(this._updateContent(a, s)) } this.rendered = i; this._setWidget(); r.each(x, function (e) { var n; if (this.initialize === "render" && (n = this(t))) { t.plugins[e] = n } }); this._unassignEvents(); this._assignEvents(); this._when(p).then(function () { t._trigger("render"); t.positioning = s; if (!t.hiddenDuringWait && (n.show.ready || e)) { t.toggle(i, o.event, s) } t.hiddenDuringWait = s }); b.api[this.id] = this; return this }; w.destroy = function (e) { function t() { if (this.destroyed) { return } this.destroyed = i; var e = this.target, t = e.attr(B), n; if (this.rendered) { this.tooltip.stop(1, 0).find("*").remove().end().remove() } r.each(this.plugins, function (e) { this.destroy && this.destroy() }); for (n in this.timers) { clearTimeout(this.timers[n]) } e.removeData(T).removeAttr(C).removeAttr(N).removeAttr("aria-describedby"); if (this.options.suppress && t) { e.attr("title", t).removeAttr(B) } this._unassignEvents(); this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = o; delete b.api[this.id] } if (this.destroyed) { return this.target } if ((e !== i || this.triggering === "hide") && this.rendered) { this.tooltip.one("tooltiphidden", r.proxy(t, this)); !this.triggering && this.hide() } else { t.call(this) } return this.target }; S = w.checks = { builtin: { "^id$": function (e, t, n, o) { var u = n === i ? b.nextid : n, a = T + "-" + u; if (u !== s && u.length > 0 && !r("#" + a).length) { this._id = a; if (this.rendered) { this.tooltip[0].id = this._id; this.elements.content[0].id = this._id + "-content"; this.elements.title[0].id = this._id + "-title" } } else { e[t] = o } }, "^prerender": function (e, t, n) { n && !this.rendered && this.render(this.options.show.ready) }, "^content.text$": function (e, t, n) { this._updateContent(n) }, "^content.attr$": function (e, t, n, r) { if (this.options.content.text === this.target.attr(r)) { this._updateContent(this.target.attr(n)) } }, "^content.title$": function (e, t, n) { if (!n) { return this._removeTitle() } n && !this.elements.title && this._createTitle(); this._updateTitle(n) }, "^content.button$": function (e, t, n) { this._updateButton(n) }, "^content.title.(text|button)$": function (e, t, n) { this.set("content." + t, n) }, "^position.(my|at)$": function (e, t, n) { "string" === typeof n && (this.position[t] = e[t] = new E(n, t === "at")) }, "^position.container$": function (e, t, n) { this.rendered && this.tooltip.appendTo(n) }, "^show.ready$": function (e, t, n) { n && (!this.rendered && this.render(i) || this.toggle(i)) }, "^style.classes$": function (e, t, n, r) { this.rendered && this.tooltip.removeClass(r).addClass(n) }, "^style.(width|height)": function (e, t, n) { this.rendered && this.tooltip.css(t, n) }, "^style.widget|content.title": function () { this.rendered && this._setWidget() }, "^style.def": function (e, t, n) { this.rendered && this.tooltip.toggleClass(M, !!n) }, "^events.(render|show|move|hide|focus|blur)$": function (e, t, n) { this.rendered && this.tooltip[(r.isFunction(n) ? "" : "un") + "bind"]("tooltip" + t, n) }, "^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)": function () { if (!this.rendered) { return } var e = this.options.position; this.tooltip.attr("tracking", e.target === "mouse" && e.adjust.mouse); this._unassignEvents(); this._assignEvents() } } }; w.get = function (e) { if (this.destroyed) { return this } var t = z(this.options, e.toLowerCase()), n = t[0][t[1]]; return n.precedance ? n.string() : n }; var X = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i, V = /^prerender|show\.ready/i; w.set = function (e, t) { if (this.destroyed) { return this } var n = this.rendered, u = s, a = this.options, f = this.checks, l; if ("string" === typeof e) { l = e; e = {}; e[l] = t } else { e = r.extend({}, e) } r.each(e, function (t, i) { if (n && V.test(t)) { delete e[t]; return } var s = z(a, t.toLowerCase()), o; o = s[0][s[1]]; s[0][s[1]] = i && i.nodeType ? r(i) : i; u = X.test(t) || u; e[t] = [s[0], s[1], i, o] }); U(a); this.positioning = i; r.each(e, r.proxy(W, this)); this.positioning = s; if (this.rendered && this.tooltip[0].offsetWidth > 0 && u) { this.reposition(a.position.target === "mouse" ? o : this.cache.event) } return this }; w._update = function (e, t, n) { var u = this, a = this.cache; if (!this.rendered || !e) { return s } if (r.isFunction(e)) { e = e.call(this.elements.target, a.event, this) || "" } if (r.isFunction(e.then)) { a.waiting = i; return e.then(function (e) { a.waiting = s; return u._update(e, t) }, o, function (e) { return u._update(e, t) }) } if (e === s || !e && e !== "") { return s } if (e.jquery && e.length > 0) { t.empty().append(e.css({ display: "block", visibility: "visible" })) } else { t.html(e) } return this._waitForContent(t).then(function (e) { if (u.rendered && u.tooltip[0].offsetWidth > 0) { u.reposition(a.event, !e.length) } }) }; w._waitForContent = function (e) { var t = this.cache; t.waiting = i; return (r.fn.imagesLoaded ? e.imagesLoaded() : r.Deferred().resolve([])).done(function () { t.waiting = s }).promise() }; w._updateContent = function (e, t) { this._update(e, this.elements.content, t) }; w._updateTitle = function (e, t) { if (this._update(e, this.elements.title, t) === s) { this._removeTitle(s) } }; w._createTitle = function () { var e = this.elements, t = this._id + "-title"; if (e.titlebar) { this._removeTitle() } e.titlebar = r("<div />", { "class": T + "-titlebar " + (this.options.style.widget ? J("header") : "") }).append(e.title = r("<div />", { id: t, "class": T + "-title", "aria-atomic": i })).insertBefore(e.content).delegate(".qtip-close", "mousedown keydown mouseup keyup mouseout", function (e) { r(this).toggleClass("ui-state-active ui-state-focus", e.type.substr(-4) === "down") }).delegate(".qtip-close", "mouseover mouseout", function (e) { r(this).toggleClass("ui-state-hover", e.type === "mouseover") }); if (this.options.content.button) { this._createButton() } }; w._removeTitle = function (e) { var t = this.elements; if (t.title) { t.titlebar.remove(); t.titlebar = t.title = t.button = o; if (e !== s) { this.reposition() } } }; w._createPosClass = function (e) { return T + "-pos-" + (e || this.options.position.my).abbrev() }; w.reposition = function (n, o) { if (!this.rendered || this.positioning || this.destroyed) { return this } this.positioning = i; var u = this.cache, a = this.tooltip, f = this.options.position, l = f.target, m = f.my, g = f.at, y = f.viewport, b = f.container, w = f.adjust, E = w.method.split(" "), S = a.outerWidth(s), T = a.outerHeight(s), N = 0, C = 0, k = a.css("position"), L = { left: 0, top: 0 }, A = a[0].offsetWidth > 0, O = n && n.type === "scroll", M = r(e), _ = b[0].ownerDocument, D = this.mouse, P, H, B, j; if (r.isArray(l) && l.length === 2) { g = { x: h, y: c }; L = { left: l[0], top: l[1] } } else if (l === "mouse") { g = { x: h, y: c }; if ((!w.mouse || this.options.hide.distance) && u.origin && u.origin.pageX) { n = u.origin } else if (!n || n && (n.type === "resize" || n.type === "scroll")) { n = u.event } else if (D && D.pageX) { n = D } if (k !== "static") { L = b.offset() } if (_.body.offsetWidth !== (e.innerWidth || _.documentElement.clientWidth)) { H = r(t.body).offset() } L = { left: n.pageX - L.left + (H && H.left || 0), top: n.pageY - L.top + (H && H.top || 0) }; if (w.mouse && O && D) { L.left -= (D.scrollX || 0) - M.scrollLeft(); L.top -= (D.scrollY || 0) - M.scrollTop() } } else { if (l === "event") { if (n && n.target && n.type !== "scroll" && n.type !== "resize") { u.target = r(n.target) } else if (!n.target) { u.target = this.elements.target } } else if (l !== "event") { u.target = r(l.jquery ? l : this.elements.target) } l = u.target; l = r(l).eq(0); if (l.length === 0) { return this } else if (l[0] === t || l[0] === e) { N = F.iOS ? e.innerWidth : l.width(); C = F.iOS ? e.innerHeight : l.height(); if (l[0] === e) { L = { top: (y || l).scrollTop(), left: (y || l).scrollLeft() } } } else if (x.imagemap && l.is("area")) { P = x.imagemap(this, l, g, x.viewport ? E : s) } else if (x.svg && l && l[0].ownerSVGElement) { P = x.svg(this, l, g, x.viewport ? E : s) } else { N = l.outerWidth(s); C = l.outerHeight(s); L = l.offset() } if (P) { N = P.width; C = P.height; H = P.offset; L = P.position } L = this.reposition.offset(l, L, b); if (F.iOS > 3.1 && F.iOS < 4.1 || F.iOS >= 4.3 && F.iOS < 4.33 || !F.iOS && k === "fixed") { L.left -= M.scrollLeft(); L.top -= M.scrollTop() } if (!P || P && P.adjustable !== s) { L.left += g.x === d ? N : g.x === v ? N / 2 : 0; L.top += g.y === p ? C : g.y === v ? C / 2 : 0 } } L.left += w.x + (m.x === d ? -S : m.x === v ? -S / 2 : 0); L.top += w.y + (m.y === p ? -T : m.y === v ? -T / 2 : 0); if (x.viewport) { B = L.adjusted = x.viewport(this, L, f, N, C, S, T); if (H && B.left) { L.left += H.left } if (H && B.top) { L.top += H.top } if (B.my) { this.position.my = B.my } } else { L.adjusted = { left: 0, top: 0 } } if (u.posClass !== (j = this._createPosClass(this.position.my))) { a.removeClass(u.posClass).addClass(u.posClass = j) } if (!this._trigger("move", [L, y.elem || y], n)) { return this } delete L.adjusted; if (o === s || !A || isNaN(L.left) || isNaN(L.top) || l === "mouse" || !r.isFunction(f.effect)) { a.css(L) } else if (r.isFunction(f.effect)) { f.effect.call(a, this, r.extend({}, L)); a.queue(function (e) { r(this).css({ opacity: "", height: "" }); if (F.ie) { this.style.removeAttribute("filter") } e() }) } this.positioning = s; return this }; w.reposition.offset = function (e, n, i) { function h(e, t) { n.left += t * e.scrollLeft(); n.top += t * e.scrollTop() } if (!i[0]) { return n } var s = r(e[0].ownerDocument), o = !!F.ie && t.compatMode !== "CSS1Compat", u = i[0], a, f, l, c; do { if ((f = r.css(u, "position")) !== "static") { if (f === "fixed") { l = u.getBoundingClientRect(); h(s, -1) } else { l = r(u).position(); l.left += parseFloat(r.css(u, "borderLeftWidth")) || 0; l.top += parseFloat(r.css(u, "borderTopWidth")) || 0 } n.left -= l.left + (parseFloat(r.css(u, "marginLeft")) || 0); n.top -= l.top + (parseFloat(r.css(u, "marginTop")) || 0); if (!a && (c = r.css(u, "overflow")) !== "hidden" && c !== "visible") { a = r(u) } } } while (u = u.offsetParent); if (a && (a[0] !== s[0] || o)) { h(a, 1) } return n }; var $ = (E = w.reposition.Corner = function (e, t) { e = ("" + e).replace(/([A-Z])/, " $1").replace(/middle/gi, v).toLowerCase(); this.x = (e.match(/left|right/i) || e.match(/center/) || ["inherit"])[0].toLowerCase(); this.y = (e.match(/top|bottom|center/i) || ["inherit"])[0].toLowerCase(); this.forceY = !!t; var n = e.charAt(0); this.precedance = n === "t" || n === "b" ? a : u }).prototype; $.invert = function (e, t) { this[e] = this[e] === h ? d : this[e] === d ? h : t || this[e] }; $.string = function (e) { var t = this.x, n = this.y; var r = t !== n ? t === "center" || n !== "center" && (this.precedance === a || this.forceY) ? [n, t] : [t, n] : [t]; return e !== false ? r.join(" ") : r }; $.abbrev = function () { var e = this.string(false); return e[0].charAt(0) + (e[1] && e[1].charAt(0) || "") }; $.clone = function () { return new E(this.string(), this.forceY) }; w.toggle = function (e, n) { var u = this.cache, a = this.options, f = this.tooltip; if (n) { if (/over|enter/.test(n.type) && u.event && /out|leave/.test(u.event.type) && a.show.target.add(n.target).length === a.show.target.length && f.has(n.relatedTarget).length) { return this } u.event = r.event.fix(n) } this.waiting && !e && (this.hiddenDuringWait = i); if (!this.rendered) { return e ? this.render(1) : this } else if (this.destroyed || this.disabled) { return this } var l = e ? "show" : "hide", c = this.options[l], h = this.options[!e ? "show" : "hide"], p = this.options.position, d = this.options.content, v = this.tooltip.css("width"), m = this.tooltip.is(":visible"), g = e || c.target.length === 1, y = !n || c.target.length < 2 || u.target[0] === n.target, b, w, E, S, x; if ((typeof e).search("boolean|number")) { e = !m } b = !f.is(":animated") && m === e && y; w = !b ? !!this._trigger(l, [90]) : o; if (this.destroyed) { return this } if (w !== s && e) { this.focus(n) } if (!w || b) { return this } r.attr(f[0], "aria-hidden", !!!e); if (e) { this.mouse && (u.origin = r.event.fix(this.mouse)); if (r.isFunction(d.text)) { this._updateContent(d.text, s) } if (r.isFunction(d.title)) { this._updateTitle(d.title, s) } if (!j && p.target === "mouse" && p.adjust.mouse) { r(t).bind("mousemove." + T, this._storeMouse); j = i } if (!v) { f.css("width", f.outerWidth(s)) } this.reposition(n, arguments[2]); if (!v) { f.css("width", "") } if (!!c.solo) { (typeof c.solo === "string" ? r(c.solo) : r(L, c.solo)).not(f).not(c.target).qtip("hide", r.Event("tooltipsolo")) } } else { clearTimeout(this.timers.show); delete u.origin; if (j && !r(L + '[tracking="true"]:visible', c.solo).not(f).length) { r(t).unbind("mousemove." + T); j = s } this.blur(n) } x = r.proxy(function () { if (e) { if (F.ie) { f[0].style.removeAttribute("filter") } f.css("overflow", ""); if ("string" === typeof c.autofocus) { r(this.options.show.autofocus, f).focus() } this.options.show.target.trigger("qtip-" + this.id + "-inactive") } else { f.css({ display: "", visibility: "", opacity: "", left: "", top: "" }) } this._trigger(e ? "visible" : "hidden") }, this); if (c.effect === s || g === s) { f[l](); x() } else if (r.isFunction(c.effect)) { f.stop(1, 1); c.effect.call(f, this); f.queue("fx", function (e) { x(); e() }) } else { f.fadeTo(90, e ? 1 : 0, x) } if (e) { c.target.trigger("qtip-" + this.id + "-inactive") } return this }; w.show = function (e) { return this.toggle(i, e) }; w.hide = function (e) { return this.toggle(s, e) }; w.focus = function (e) { if (!this.rendered || this.destroyed) { return this } var t = r(L), n = this.tooltip, i = parseInt(n[0].style.zIndex, 10), s = b.zindex + t.length, o; if (!n.hasClass(_)) { if (this._trigger("focus", [s], e)) { if (i !== s) { t.each(function () { if (this.style.zIndex > i) { this.style.zIndex = this.style.zIndex - 1 } }); t.filter("." + _).qtip("blur", e) } n.addClass(_)[0].style.zIndex = s } } return this }; w.blur = function (e) { if (!this.rendered || this.destroyed) { return this } this.tooltip.removeClass(_); this._trigger("blur", [this.tooltip.css("zIndex")], e); return this }; w.disable = function (e) { if (this.destroyed) { return this } if (e === "toggle") { e = !(this.rendered ? this.tooltip.hasClass(P) : this.disabled) } else if ("boolean" !== typeof e) { e = i } if (this.rendered) { this.tooltip.toggleClass(P, e).attr("aria-disabled", e) } this.disabled = !!e; return this }; w.enable = function () { return this.disable(s) }; w._createButton = function () { var e = this, t = this.elements, n = t.tooltip, i = this.options.content.button, o = typeof i === "string", u = o ? i : "Close tooltip"; if (t.button) { t.button.remove() } if (i.jquery) { t.button = i } else { t.button = r("<a />", { "class": "qtip-close " + (this.options.style.widget ? "" : T + "-icon"), title: u, "aria-label": u }).prepend(r("<span />", { "class": "ui-icon ui-icon-close", html: "&times;" })) } t.button.appendTo(t.titlebar || n).attr("role", "button").click(function (t) { if (!n.hasClass(P)) { e.hide(t) } return s }) }; w._updateButton = function (e) { if (!this.rendered) { return s } var t = this.elements.button; if (e) { this._createButton() } else { t.remove() } }; w._setWidget = function () { var e = this.options.style.widget, t = this.elements, n = t.tooltip, r = n.hasClass(P); n.removeClass(P); P = e ? "ui-state-disabled" : "qtip-disabled"; n.toggleClass(P, r); n.toggleClass("ui-helper-reset " + J(), e).toggleClass(M, this.options.style.def && !e); if (t.content) { t.content.toggleClass(J("content"), e) } if (t.titlebar) { t.titlebar.toggleClass(J("header"), e) } if (t.button) { t.button.toggleClass(T + "-icon", !e) } }; w._storeMouse = function (e) { (this.mouse = r.event.fix(e)).type = "mousemove"; return this }; w._bind = function (e, t, n, i, s) { if (!e || !n || !t.length) { return } var o = "." + this._id + (i ? "-" + i : ""); r(e).bind((t.split ? t : t.join(o + " ")) + o, r.proxy(n, s || this)); return this }; w._unbind = function (e, t) { e && r(e).unbind("." + this._id + (t ? "-" + t : "")); return this }; w._trigger = function (e, t, n) { var i = r.Event("tooltip" + e); i.originalEvent = n && r.extend({}, n) || this.cache.event || o; this.triggering = e; this.tooltip.trigger(i, [this].concat(t || [])); this.triggering = s; return !i.isDefaultPrevented() }; w._bindEvents = function (e, t, n, i, s, o) { var u = n.filter(i).add(i.filter(n)), a = []; if (u.length) { r.each(t, function (t, n) { var i = r.inArray(n, e); i > -1 && a.push(e.splice(i, 1)[0]) }); if (a.length) { this._bind(u, a, function (e) { var t = this.rendered ? this.tooltip[0].offsetWidth > 0 : false; (t ? o : s).call(this, e) }); n = n.not(u); i = i.not(u) } } this._bind(n, e, s); this._bind(i, t, o) }; w._assignInitialEvents = function (e) { function f(e) { if (this.disabled || this.destroyed) { return s } this.cache.event = e && r.event.fix(e); this.cache.target = e && r(e.target); clearTimeout(this.timers.show); this.timers.show = K.call(this, function () { this.render(typeof e === "object" || t.show.ready) }, t.prerender ? 0 : t.show.delay) } var t = this.options, n = t.show.target, o = t.hide.target, u = t.show.event ? r.trim("" + t.show.event).split(" ") : [], a = t.hide.event ? r.trim("" + t.hide.event).split(" ") : []; this._bind(this.elements.target, ["remove", "removeqtip"], function (e) { this.destroy(true) }, "destroy"); if (/mouse(over|enter)/i.test(t.show.event) && !/mouse(out|leave)/i.test(t.hide.event)) { a.push("mouseleave") } this._bind(n, "mousemove", function (e) { this._storeMouse(e); this.cache.onTarget = i }); this._bindEvents(u, a, n, o, f, function () { if (!this.timers) { return s } clearTimeout(this.timers.show) }); if (t.show.ready || t.prerender) { f.call(this, e) } }; w._assignEvents = function () { var n = this, i = this.options, o = i.position, u = this.tooltip, a = i.show.target, f = i.hide.target, l = o.container, c = o.viewport, h = r(t), p = r(t.body), d = r(e), v = i.show.event ? r.trim("" + i.show.event).split(" ") : [], m = i.hide.event ? r.trim("" + i.hide.event).split(" ") : []; r.each(i.events, function (e, t) { n._bind(u, e === "toggle" ? ["tooltipshow", "tooltiphide"] : ["tooltip" + e], t, null, u) }); if (/mouse(out|leave)/i.test(i.hide.event) && i.hide.leave === "window") { this._bind(h, ["mouseout", "blur"], function (e) { if (!/select|option/.test(e.target.nodeName) && !e.relatedTarget) { this.hide(e) } }) } if (i.hide.fixed) { f = f.add(u.addClass(O)) } else if (/mouse(over|enter)/i.test(i.show.event)) { this._bind(f, "mouseleave", function () { clearTimeout(this.timers.show) }) } if (("" + i.hide.event).indexOf("unfocus") > -1) { this._bind(l.closest("html"), ["mousedown", "touchstart"], function (e) { var t = r(e.target), n = this.rendered && !this.tooltip.hasClass(P) && this.tooltip[0].offsetWidth > 0, i = t.parents(L).filter(this.tooltip[0]).length > 0; if (t[0] !== this.target[0] && t[0] !== this.tooltip[0] && !i && !this.target.has(t[0]).length && n) { this.hide(e) } }) } if ("number" === typeof i.hide.inactive) { this._bind(a, "qtip-" + this.id + "-inactive", Y, "inactive"); this._bind(f.add(u), b.inactiveEvents, Y) } this._bindEvents(v, m, a, f, Q, G); this._bind(a.add(u), "mousemove", function (e) { if ("number" === typeof i.hide.distance) { var t = this.cache.origin || {}, n = this.options.hide.distance, r = Math.abs; if (r(e.pageX - t.pageX) >= n || r(e.pageY - t.pageY) >= n) { this.hide(e) } } this._storeMouse(e) }); if (o.target === "mouse") { if (o.adjust.mouse) { if (i.hide.event) { this._bind(a, ["mouseenter", "mouseleave"], function (e) { if (!this.cache) { return s } this.cache.onTarget = e.type === "mouseenter" }) } this._bind(h, "mousemove", function (e) { if (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(P) && this.tooltip[0].offsetWidth > 0) { this.reposition(e) } }) } } if (o.adjust.resize || c.length) { this._bind(r.event.special.resize ? c : d, "resize", Z) } if (o.adjust.scroll) { this._bind(d.add(o.container), "scroll", Z) } }; w._unassignEvents = function () { var n = this.options, i = n.show.target, s = n.hide.target, o = r.grep([this.elements.target[0], this.rendered && this.tooltip[0], n.position.container[0], n.position.viewport[0], n.position.container.closest("html")[0], e, t], function (e) { return typeof e === "object" }); if (i && i.toArray) { o = o.concat(i.toArray()) } if (s && s.toArray) { o = o.concat(s.toArray()) } this._unbind(o)._unbind(o, "destroy")._unbind(o, "inactive") }; r(function () { et(L, ["mouseenter", "mouseleave"], function (e) { var t = e.type === "mouseenter", n = r(e.currentTarget), i = r(e.relatedTarget || e.target), s = this.options; if (t) { this.focus(e); n.hasClass(O) && !n.hasClass(P) && clearTimeout(this.timers.hide) } else { if (s.position.target === "mouse" && s.position.adjust.mouse && s.hide.event && s.show.target && !i.closest(s.show.target[0]).length) { this.hide(e) } } n.toggleClass(D, t) }); et("[" + C + "]", A, Y) }); b = r.fn.qtip = function (e, t, u) { var a = ("" + e).toLowerCase(), f = o, l = r.makeArray(arguments).slice(1), c = l[l.length - 1], h = this[0] ? r.data(this[0], T) : o; if (!arguments.length && h || a === "api") { return h } else if ("string" === typeof e) { this.each(function () { var e = r.data(this, T); if (!e) { return i } if (c && c.timeStamp) { e.cache.event = c } if (t && (a === "option" || a === "options")) { if (u !== n || r.isPlainObject(t)) { e.set(t, u) } else { f = e.get(t); return s } } else if (e[a]) { e[a].apply(e, l) } }); return f !== o ? f : this } else if ("object" === typeof e || !arguments.length) { h = U(r.extend(i, {}, e)); return this.each(function (e) { var t, n; n = r.isArray(h.id) ? h.id[e] : h.id; n = !n || n === s || n.length < 1 || b.api[n] ? b.nextid++ : n; t = tt(r(this), n, h); if (t === s) { return i } else { b.api[n] = t } r.each(x, function () { if (this.initialize === "initialize") { this(t) } }); t._assignInitialEvents(c) }) } }; r.qtip = I; b.api = {}; r.each({ attr: function (e, t) { if (this.length) { var n = this[0], i = "title", s = r.data(n, "qtip"); if (e === i && s && "object" === typeof s && s.options.suppress) { if (arguments.length < 2) { return r.attr(n, B) } if (s && s.options.content.attr === i && s.cache.attr) { s.set("content.text", t) } return this.attr(B, t) } } return r.fn["attr" + H].apply(this, arguments) }, clone: function (e) { var t = r([]), n = "title", i = r.fn["clone" + H].apply(this, arguments); if (!e) { i.filter("[" + B + "]").attr("title", function () { return r.attr(this, B) }).removeAttr(B) } return i } }, function (e, t) { if (!t || r.fn[e + H]) { return i } var n = r.fn[e + H] = r.fn[e]; r.fn[e] = function () { return t.apply(this, arguments) || n.apply(this, arguments) } }); if (!r.ui) { r["cleanData" + H] = r.cleanData; r.cleanData = function (e) { for (var t = 0, n; (n = r(e[t])).length; t++) { if (n.attr(N)) { try { n.triggerHandler("removeqtip") } catch (i) { } } } r["cleanData" + H].apply(this, arguments) } } b.version = "2.2.1"; b.nextid = 0; b.inactiveEvents = A; b.zindex = 15e3; b.defaults = { prerender: s, id: s, overwrite: i, suppress: i, content: { text: i, attr: "title", title: s, button: s }, position: { my: "top left", at: "bottom right", target: s, container: s, viewport: s, adjust: { x: 0, y: 0, mouse: i, scroll: i, resize: i, method: "flipinvert flipinvert" }, effect: function (e, t, n) { r(this).animate(t, { duration: 200, queue: s }) } }, show: { target: s, event: "mouseenter", effect: i, delay: 90, solo: s, ready: s, autofocus: s }, hide: { target: s, event: "mouseleave", effect: i, delay: 0, fixed: s, inactive: s, leave: "window", distance: s }, style: { classes: "", widget: s, width: s, height: s, def: i }, events: { render: o, move: o, show: o, hide: o, toggle: o, visible: o, hidden: o, focus: o, blur: o } }; var nt, rt = ".qtip-tip", it = "margin", st = "border", ot = "color", ut = "background-color", at = "transparent", ft = " !important", lt = !!t.createElement("canvas").getContext, ct = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i; var pt = {}, dt = ["Webkit", "O", "Moz", "ms"]; if (!lt) { var gt = function (e, t, n) { return "<qtipvml:" + e + ' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" ' + (t || "") + ' style="behavior: url(#default#VML); ' + (n || "") + '" />' } } else { var yt = e.devicePixelRatio || 1, bt = function () { var e = t.createElement("canvas").getContext("2d"); return e.backingStorePixelRatio || e.webkitBackingStorePixelRatio || e.mozBackingStorePixelRatio || e.msBackingStorePixelRatio || e.oBackingStorePixelRatio || 1 }(), wt = yt / bt } r.extend(Et.prototype, { init: function (e) { var t, n; n = this.element = e.elements.tip = r("<div />", { "class": T + "-tip" }).prependTo(e.tooltip); if (lt) { t = r("<canvas />").appendTo(this.element)[0].getContext("2d"); t.lineJoin = "miter"; t.miterLimit = 1e5; t.save() } else { t = gt("shape", 'coordorigin="0,0"', "position:absolute;"); this.element.html(t + t); e._bind(r("*", n).add(n), ["click", "mousedown"], function (e) { e.stopPropagation() }, this._ns) } e._bind(e.tooltip, "tooltipmove", this.reposition, this._ns, this); this.create() }, _swapDimensions: function () { this.size[0] = this.options.height; this.size[1] = this.options.width }, _resetDimensions: function () { this.size[0] = this.options.width; this.size[1] = this.options.height }, _useTitle: function (e) { var t = this.qtip.elements.titlebar; return t && (e.y === c || e.y === v && this.element.position().top + this.size[1] / 2 + this.options.offset < t.outerHeight(i)) }, _parseCorner: function (e) { var t = this.qtip.options.position.my; if (e === s || t === s) { e = s } else if (e === i) { e = new E(t.string()) } else if (!e.string) { e = new E(e); e.fixed = i } return e }, _parseWidth: function (e, t, n) { var r = this.qtip.elements, i = st + ht(t) + "Width"; return (n ? mt(n, i) : mt(r.content, i) || mt(this._useTitle(e) && r.titlebar || r.content, i) || mt(r.tooltip, i)) || 0 }, _parseRadius: function (e) { var t = this.qtip.elements, n = st + ht(e.y) + ht(e.x) + "Radius"; return F.ie < 9 ? 0 : mt(this._useTitle(e) && t.titlebar || t.content, n) || mt(t.tooltip, n) || 0 }, _invalidColour: function (e, t, n) { var r = e.css(t); return !r || n && r === e.css(n) || ct.test(r) ? s : r }, _parseColours: function (e) { var t = this.qtip.elements, n = this.element.css("cssText", ""), i = st + ht(e[e.precedance]) + ht(ot), s = this._useTitle(e) && t.titlebar || t.content, o = this._invalidColour, u = []; u[0] = o(n, ut) || o(s, ut) || o(t.content, ut) || o(t.tooltip, ut) || n.css(ut); u[1] = o(n, i, ot) || o(s, i, ot) || o(t.content, i, ot) || o(t.tooltip, i, ot) || t.tooltip.css(i); r("*", n).add(n).css("cssText", ut + ":" + at + ft + ";" + st + ":0" + ft + ";"); return u }, _calculateSize: function (e) { var t = e.precedance === a, n = this.options["width"], r = this.options["height"], i = e.abbrev() === "c", s = (t ? n : r) * (i ? .5 : 1), o = Math.pow, u = Math.round, f, l, c, h = Math.sqrt(o(s, 2) + o(r, 2)), p = [this.border / s * h, this.border / r * h]; p[2] = Math.sqrt(o(p[0], 2) - o(this.border, 2)); p[3] = Math.sqrt(o(p[1], 2) - o(this.border, 2)); f = h + p[2] + p[3] + (i ? 0 : p[0]); l = f / h; c = [u(l * n), u(l * r)]; return t ? c : c.reverse() }, _calculateTip: function (e, t, n) { n = n || 1; t = t || this.size; var r = t[0] * n, i = t[1] * n, s = Math.ceil(r / 2), o = Math.ceil(i / 2), u = { br: [0, 0, r, i, r, 0], bl: [0, 0, r, 0, 0, i], tr: [0, i, r, 0, r, i], tl: [0, 0, 0, i, r, i], tc: [0, i, s, 0, r, i], bc: [0, 0, r, 0, s, i], rc: [0, 0, r, o, 0, i], lc: [r, 0, r, i, 0, o] }; u.lt = u.br; u.rt = u.bl; u.lb = u.tr; u.rb = u.tl; return u[e.abbrev()] }, _drawCoords: function (e, t) { e.beginPath(); e.moveTo(t[0], t[1]); e.lineTo(t[2], t[3]); e.lineTo(t[4], t[5]); e.closePath() }, create: function () { var e = this.corner = (lt || F.ie) && this._parseCorner(this.options.corner); if (this.enabled = !!this.corner && this.corner.abbrev() !== "c") { this.qtip.cache.corner = e.clone(); this.update() } this.element.toggle(this.enabled); return this.corner }, update: function (t, n) { if (!this.enabled) { return this } var o = this.qtip.elements, m = this.element, g = m.children(), y = this.options, b = this.size, w = y.mimic, S = Math.round, x, T, N, C, k, L, A, O, M; if (!t) { t = this.qtip.cache.corner || this.corner } if (w === s) { w = t } else { w = new E(w); w.precedance = t.precedance; if (w.x === "inherit") { w.x = t.x } else if (w.y === "inherit") { w.y = t.y } else if (w.x === w.y) { w[t.precedance] = t[t.precedance] } } T = w.precedance; if (t.precedance === u) { this._swapDimensions() } else { this._resetDimensions() } x = this.color = this._parseColours(t); if (x[1] !== at) { O = this.border = this._parseWidth(t, t[t.precedance]); if (y.border && O < 1 && !ct.test(x[1])) { x[0] = x[1] } this.border = O = y.border !== i ? y.border : O } else { this.border = O = 0 } A = this.size = this._calculateSize(t); m.css({ width: A[0], height: A[1], lineHeight: A[1] + "px" }); if (t.precedance === a) { L = [S(w.x === h ? O : w.x === d ? A[0] - b[0] - O : (A[0] - b[0]) / 2), S(w.y === c ? A[1] - b[1] : 0)] } else { L = [S(w.x === h ? A[0] - b[0] : 0), S(w.y === c ? O : w.y === p ? A[1] - b[1] - O : (A[1] - b[1]) / 2)] } if (lt) { N = g[0].getContext("2d"); N.restore(); N.save(); N.clearRect(0, 0, 6e3, 6e3); C = this._calculateTip(w, b, wt); k = this._calculateTip(w, this.size, wt); g.attr(f, A[0] * wt).attr(l, A[1] * wt); g.css(f, A[0]).css(l, A[1]); this._drawCoords(N, k); N.fillStyle = x[1]; N.fill(); N.translate(L[0] * wt, L[1] * wt); this._drawCoords(N, C); N.fillStyle = x[0]; N.fill() } else { C = this._calculateTip(w); C = "m" + C[0] + "," + C[1] + " l" + C[2] + "," + C[3] + " " + C[4] + "," + C[5] + " xe"; L[2] = O && /^(r|b)/i.test(t.string()) ? F.ie === 8 ? 2 : 1 : 0; g.css({ coordsize: A[0] + O + " " + (A[1] + O), antialias: "" + (w.string().indexOf(v) > -1), left: L[0] - L[2] * Number(T === u), top: L[1] - L[2] * Number(T === a), width: A[0] + O, height: A[1] + O }).each(function (e) { var t = r(this); t[t.prop ? "prop" : "attr"]({ coordsize: A[0] + O + " " + (A[1] + O), path: C, fillcolor: x[0], filled: !!e, stroked: !e }).toggle(!!(O || e)); !e && t.html(gt("stroke", 'weight="' + O * 2 + 'px" color="' + x[1] + '" miterlimit="1000" joinstyle="miter"')) }) } e.opera && setTimeout(function () { o.tip.css({ display: "inline-block", visibility: "visible" }) }, 1); if (n !== s) { this.calculate(t, A) } }, calculate: function (e, t) { if (!this.enabled) { return s } var n = this, i = this.qtip.elements, o = this.element, f = this.options.offset, l = i.tooltip.hasClass("ui-widget"), p = {}, d, m; e = e || this.corner; d = e.precedance; t = t || this._calculateSize(e); m = [e.x, e.y]; if (d === u) { m.reverse() } r.each(m, function (r, s) { var o, u, l; if (s === v) { o = d === a ? h : c; p[o] = "50%"; p[it + "-" + o] = -Math.round(t[d === a ? 0 : 1] / 2) + f } else { o = n._parseWidth(e, s, i.tooltip); u = n._parseWidth(e, s, i.content); l = n._parseRadius(e); p[s] = Math.max(-n.border, r ? u : f + (l > o ? l : -o)) } }); p[e[d]] -= t[d === u ? 0 : 1]; o.css({ margin: "", top: "", bottom: "", left: "", right: "" }).css(p); return p }, reposition: function (e, t, r, o) { function N(e, t, n, r, i) { if (e === y && l.precedance === t && m[r] && l[n] !== v) { l.precedance = l.precedance === u ? a : u } else if (e !== y && m[r]) { l[t] = l[t] === v ? m[r] > 0 ? r : i : l[t] === r ? i : r } } function C(e, t, i) { if (l[e] === v) { x[it + "-" + t] = E[e] = S[it + "-" + t] - m[t] } else { T = S[i] !== n ? [m[t], -S[t]] : [-m[t], S[t]]; if ((E[e] = Math.max(T[0], T[1])) > T[0]) { r[t] -= m[t]; E[t] = s } x[S[i] !== n ? i : t] = E[e] } } if (!this.enabled) { return } var f = t.cache, l = this.corner.clone(), m = r.adjusted, g = t.options.position.adjust.method.split(" "), b = g[0], w = g[1] || g[0], E = { left: s, top: s, x: 0, y: 0 }, S, x = {}, T; if (this.corner.fixed !== i) { N(b, u, a, h, d); N(w, a, u, c, p); if (l.string() !== f.corner.string() || f.cornerTop !== m.top || f.cornerLeft !== m.left) { this.update(l, s) } } S = this.calculate(l); if (S.right !== n) { S.left = -S.right } if (S.bottom !== n) { S.top = -S.bottom } S.user = this.offset; if (E.left = b === y && !!m.left) { C(u, h, d) } if (E.top = w === y && !!m.top) { C(a, c, p) } this.element.css(x).toggle(!(E.x && E.y || l.x === v && E.y || l.y === v && E.x)); r.left -= S.left.charAt ? S.user : b !== y || E.top || !E.left && !E.top ? S.left + this.border : 0; r.top -= S.top.charAt ? S.user : w !== y || E.left || !E.left && !E.top ? S.top + this.border : 0; f.cornerLeft = m.left; f.cornerTop = m.top; f.corner = l.clone() }, destroy: function () { this.qtip._unbind(this.qtip.tooltip, this._ns); if (this.qtip.elements.tip) { this.qtip.elements.tip.find("*").remove().end().remove() } } }); nt = x.tip = function (e) { return new Et(e, e.options.style.tip) }; nt.initialize = "render"; nt.sanitize = function (e) { if (e.style && "tip" in e.style) { var t = e.style.tip; if (typeof t !== "object") { t = e.style.tip = { corner: t } } if (!/string|boolean/i.test(typeof t.corner)) { t.corner = i } } }; S.tip = { "^position.my|style.tip.(corner|mimic|border)$": function () { this.create(); this.qtip.reposition() }, "^style.tip.(height|width)$": function (e) { this.size = [e.width, e.height]; this.update(); this.qtip.reposition() }, "^content.title|style.(classes|widget)$": function () { this.update() } }; r.extend(i, b.defaults, { style: { tip: { corner: i, mimic: s, width: 6, height: 6, border: i, offset: 0 } } }); x.viewport = function (n, r, i, o, m, b, w) { function R(e, t, n, i, s, o, u, a, l) { var c = r[s], h = x[e], p = T[e], d = n === y, m = h === s ? l : h === o ? -l : -l / 2, b = p === s ? a : p === o ? -a : -a / 2, w = I[s] + q[s] - (B ? 0 : H[s]), E = w - c, S = c + l - (u === f ? j : F) - w, N = m - (x.precedance === e || h === x[t] ? b : 0) - (p === v ? a / 2 : 0); if (d) { N = (h === s ? 1 : -1) * m; r[s] += E > 0 ? E : S > 0 ? -S : 0; r[s] = Math.max(-H[s] + q[s], c - N, Math.min(Math.max(-H[s] + q[s] + (u === f ? j : F), c + N), r[s], h === "center" ? c - m : 1e9)) } else { i *= n === g ? 2 : 0; if (E > 0 && (h !== s || S > 0)) { r[s] -= N + i; P.invert(e, s) } else if (S > 0 && (h !== o || E > 0)) { r[s] -= (h === v ? -N : N) + i; P.invert(e, o) } if (r[s] < I && -r[s] > S) { r[s] = c; P = x.clone() } } return r[s] - c } var E = i.target, S = n.elements.tooltip, x = i.my, T = i.at, N = i.adjust, C = N.method.split(" "), k = C[0], L = C[1] || C[0], A = i.viewport, O = i.container, M = n.cache, _ = { left: 0, top: 0 }, D, P, H, B, j, F, I, q; if (!A.jquery || E[0] === e || E[0] === t.body || N.method === "none") { return _ } H = O.offset() || _; B = O.css("position") === "static"; D = S.css("position") === "fixed"; j = A[0] === e ? A.width() : A.outerWidth(s); F = A[0] === e ? A.height() : A.outerHeight(s); I = { left: D ? 0 : A.scrollLeft(), top: D ? 0 : A.scrollTop() }; q = A.offset() || _; if (k !== "shift" || L !== "shift") { P = x.clone() } _ = { left: k !== "none" ? R(u, a, k, N.x, h, d, f, o, b) : 0, top: L !== "none" ? R(a, u, L, N.y, c, p, l, m, w) : 0, my: P }; return _ }; x.polys = { polygon: function (e, t) { var n = { width: 0, height: 0, position: { top: 1e10, right: 0, bottom: 0, left: 1e10 }, adjustable: s }, r = 0, i, o = [], u = 1, a = 1, f = 0, l = 0, m, g; r = e.length; while (r--) { i = [parseInt(e[--r], 10), parseInt(e[r + 1], 10)]; if (i[0] > n.position.right) { n.position.right = i[0] } if (i[0] < n.position.left) { n.position.left = i[0] } if (i[1] > n.position.bottom) { n.position.bottom = i[1] } if (i[1] < n.position.top) { n.position.top = i[1] } o.push(i) } m = n.width = Math.abs(n.position.right - n.position.left); g = n.height = Math.abs(n.position.bottom - n.position.top); if (t.abbrev() === "c") { n.position = { left: n.position.left + n.width / 2, top: n.position.top + n.height / 2 } } else { while (m > 0 && g > 0 && u > 0 && a > 0) { m = Math.floor(m / 2); g = Math.floor(g / 2); if (t.x === h) { u = m } else if (t.x === d) { u = n.width - m } else { u += Math.floor(m / 2) } if (t.y === c) { a = g } else if (t.y === p) { a = n.height - g } else { a += Math.floor(g / 2) } r = o.length; while (r--) { if (o.length < 2) { break } f = o[r][0] - n.position.left; l = o[r][1] - n.position.top; if (t.x === h && f >= u || t.x === d && f <= u || t.x === v && (f < u || f > n.width - u) || t.y === c && l >= a || t.y === p && l <= a || t.y === v && (l < a || l > n.height - a)) { o.splice(r, 1) } } } n.position = { left: o[0][0], top: o[0][1] } } return n }, rect: function (e, t, n, r) { return { width: Math.abs(n - e), height: Math.abs(r - t), position: { left: Math.min(e, n), top: Math.min(t, r) } } }, _angles: { tc: 3 / 2, tr: 7 / 4, tl: 5 / 4, bc: 1 / 2, br: 1 / 4, bl: 3 / 4, rc: 2, lc: 1, c: 0 }, ellipse: function (e, t, n, r, i) { var o = x.polys._angles[i.abbrev()], u = o === 0 ? 0 : n * Math.cos(o * Math.PI), a = r * Math.sin(o * Math.PI); return { width: n * 2 - Math.abs(u), height: r * 2 - Math.abs(a), position: { left: e + u, top: t + a }, adjustable: s } }, circle: function (e, t, n, r) { return x.polys.ellipse(e, t, n, n, r) } }; x.imagemap = function (e, t, n, i) { if (!t.jquery) { t = r(t) } var o = (t.attr("shape") || "rect").toLowerCase().replace("poly", "polygon"), u = r('img[usemap="#' + t.parent("map").attr("name") + '"]'), a = r.trim(t.attr("coords")), f = a.replace(/,$/, "").split(","), l, c, h, p, d, v; if (!u.length) { return s } if (o === "polygon") { d = x.polys.polygon(f, n) } else if (x.polys[o]) { for (h = -1, v = f.length, c = []; ++h < v;) { c.push(parseInt(f[h], 10)) } d = x.polys[o].apply(this, c.concat(n)) } else { return s } l = u.offset(); l.left += Math.ceil((u.outerWidth(s) - u.width()) / 2); l.top += Math.ceil((u.outerHeight(s) - u.height()) / 2); d.position.left += l.left; d.position.top += l.top; return d }; x.svg = function (e, n, i) { var o = r(t), u = n[0], a = r(u.ownerSVGElement), f = u.ownerDocument, l = (parseInt(n.css("stroke-width"), 10) || 0) / 2, c, h, p, d, v, m, g, y, b, w, E; while (!u.getBBox) { u = u.parentNode } if (!u.getBBox || !u.parentNode) { return s } switch (u.nodeName) { case "ellipse": case "circle": b = x.polys.ellipse(u.cx.baseVal.value, u.cy.baseVal.value, (u.rx || u.r).baseVal.value + l, (u.ry || u.r).baseVal.value + l, i); break; case "line": case "polygon": case "polyline": y = u.points || [{ x: u.x1.baseVal.value, y: u.y1.baseVal.value }, { x: u.x2.baseVal.value, y: u.y2.baseVal.value }]; for (b = [], g = -1, v = y.numberOfItems || y.length; ++g < v;) { m = y.getItem ? y.getItem(g) : y[g]; b.push.apply(b, [m.x, m.y]) } b = x.polys.polygon(b, i); break; default: b = u.getBBox(); b = { width: b.width, height: b.height, position: { left: b.x, top: b.y } }; break } w = b.position; a = a[0]; if (a.createSVGPoint) { h = u.getScreenCTM(); y = a.createSVGPoint(); y.x = w.left; y.y = w.top; p = y.matrixTransform(h); w.left = p.x; w.top = p.y } if (f !== t && e.position.target !== "mouse") { c = r((f.defaultView || f.parentWindow).frameElement).offset(); if (c) { w.left += c.left; w.top += c.top } } f = r(f); w.left += f.scrollLeft(); w.top += f.scrollTop(); return b }; var St, xt, Tt = "qtip-modal", Nt = "." + Tt; xt = function () { function c(e) { if (r.expr[":"].focusable) { return r.expr[":"].focusable } var t = !isNaN(r.attr(e, "tabindex")), n = e.nodeName && e.nodeName.toLowerCase(), i, s, o; if ("area" === n) { i = e.parentNode; s = i.name; if (!e.href || !s || i.nodeName.toLowerCase() !== "map") { return false } o = r("img[usemap=#" + s + "]")[0]; return !!o && o.is(":visible") } return /input|select|textarea|button|object/.test(n) ? !e.disabled : "a" === n ? e.href || t : t } function h(e) { if (n.length < 1 && e.length) { e.not("body").blur() } else { n.first().focus() } } function p(e) { if (!l.is(":visible")) { return } var t = r(e.target), i = u.tooltip, o = t.closest(L), f; f = o.length < 1 ? s : parseInt(o[0].style.zIndex, 10) > parseInt(i[0].style.zIndex, 10); if (!f && t.closest(L)[0] !== i[0]) { h(t) } a = e.target === n[n.length - 1] } var e = this, n = {}, u, a, f, l; r.extend(e, { init: function () { l = e.elem = r("<div />", { id: "qtip-overlay", html: "<div></div>", mousedown: function () { return s } }).hide(); r(t.body).bind("focusin" + Nt, p); r(t).bind("keydown" + Nt, function (e) { if (u && u.options.show.modal.escape && e.keyCode === 27) { u.hide(e) } }); l.bind("click" + Nt, function (e) { if (u && u.options.show.modal.blur) { u.hide(e) } }); return e }, update: function (e) { u = e; if (e.options.show.modal.stealfocus !== s) { n = e.tooltip.find("*").filter(function () { return c(this) }) } else { n = [] } }, toggle: function (n, a, c) { var p = r(t.body), d = n.tooltip, v = n.options.show.modal, m = v.effect, g = a ? "show" : "hide", y = l.is(":visible"), b = r(Nt).filter(":visible:not(:animated)").not(d), w; e.update(n); if (a && v.stealfocus !== s) { h(r(":focus")) } l.toggleClass("blurs", v.blur); if (a) { l.appendTo(t.body) } if (l.is(":animated") && y === a && f !== s || !a && b.length) { return e } l.stop(i, s); if (r.isFunction(m)) { m.call(l, a) } else if (m === s) { l[g]() } else { l.fadeTo(parseInt(c, 10) || 90, a ? 1 : 0, function () { if (!a) { l.hide() } }) } if (!a) { l.queue(function (e) { l.css({ left: "", top: "" }); if (!r(Nt).length) { l.detach() } e() }) } f = a; if (u.destroyed) { u = o } return e } }); e.init() }; xt = new xt; r.extend(Ct.prototype, { init: function (e) { var t = e.tooltip; if (!this.options.on) { return this } e.elements.overlay = xt.elem; t.addClass(Tt).css("z-index", b.modal_zindex + r(Nt).length); e._bind(t, ["tooltipshow", "tooltiphide"], function (e, n, i) { var s = e.originalEvent; if (e.target === t[0]) { if (s && e.type === "tooltiphide" && /mouse(leave|enter)/.test(s.type) && r(s.relatedTarget).closest(xt.elem[0]).length) { try { e.preventDefault() } catch (o) { } } else if (!s || s && s.type !== "tooltipsolo") { this.toggle(e, e.type === "tooltipshow", i) } } }, this._ns, this); e._bind(t, "tooltipfocus", function (e, n) { if (e.isDefaultPrevented() || e.target !== t[0]) { return } var i = r(Nt), s = b.modal_zindex + i.length, o = parseInt(t[0].style.zIndex, 10); xt.elem[0].style.zIndex = s - 1; i.each(function () { if (this.style.zIndex > o) { this.style.zIndex -= 1 } }); i.filter("." + _).qtip("blur", e.originalEvent); t.addClass(_)[0].style.zIndex = s; xt.update(n); try { e.preventDefault() } catch (u) { } }, this._ns, this); e._bind(t, "tooltiphide", function (e) { if (e.target === t[0]) { r(Nt).filter(":visible").not(t).last().qtip("focus", e) } }, this._ns, this) }, toggle: function (e, t, n) { if (e && e.isDefaultPrevented()) { return this } xt.toggle(this.qtip, !!t, n) }, destroy: function () { this.qtip.tooltip.removeClass(Tt); this.qtip._unbind(this.qtip.tooltip, this._ns); xt.toggle(this.qtip, s); delete this.qtip.elements.overlay } }); St = x.modal = function (e) { return new Ct(e, e.options.show.modal) }; St.sanitize = function (e) { if (e.show) { if (typeof e.show.modal !== "object") { e.show.modal = { on: !!e.show.modal } } else if (typeof e.show.modal.on === "undefined") { e.show.modal.on = i } } }; b.modal_zindex = b.zindex - 200; St.initialize = "render"; S.modal = { "^show.modal.(on|blur)$": function () { this.destroy(); this.init(); this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth > 0) } }; r.extend(i, b.defaults, { show: { modal: { on: s, effect: i, blur: i, stealfocus: i, escape: i } } }); var kt, Lt = '<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';" ' + ' style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); ' + '-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>'; r.extend(At.prototype, { _scroll: function () { var t = this.qtip.elements.overlay; t && (t[0].style.top = r(e).scrollTop() + "px") }, init: function (n) { var i = n.tooltip, s; if (r("select, object").length < 1) { this.bgiframe = n.elements.bgiframe = r(Lt).appendTo(i); n._bind(i, "tooltipmove", this.adjustBGIFrame, this._ns, this) } this.redrawContainer = r("<div/>", { id: T + "-rcontainer" }).appendTo(t.body); if (n.elements.overlay && n.elements.overlay.addClass("qtipmodal-ie6fix")) { n._bind(e, ["scroll", "resize"], this._scroll, this._ns, this); n._bind(i, ["tooltipshow"], this._scroll, this._ns, this) } this.redraw() }, adjustBGIFrame: function () { var e = this.qtip.tooltip, t = { height: e.outerHeight(s), width: e.outerWidth(s) }, n = this.qtip.plugins.tip, r = this.qtip.elements.tip, i, o; o = parseInt(e.css("borderLeftWidth"), 10) || 0; o = { left: -o, top: -o }; if (n && r) { i = n.corner.precedance === "x" ? [f, h] : [l, c]; o[i[1]] -= r[i[0]]() } this.bgiframe.css(o).css(t) }, redraw: function () { if (this.qtip.rendered < 1 || this.drawing) { return this } var e = this.qtip.tooltip, t = this.qtip.options.style, n = this.qtip.options.position.container, r, i, s, o; this.qtip.drawing = 1; if (t.height) { e.css(l, t.height) } if (t.width) { e.css(f, t.width) } else { e.css(f, "").appendTo(this.redrawContainer); i = e.width(); if (i % 2 < 1) { i += 1 } s = e.css("maxWidth") || ""; o = e.css("minWidth") || ""; r = (s + o).indexOf("%") > -1 ? n.width() / 100 : 0; s = (s.indexOf("%") > -1 ? r : 1) * parseInt(s, 10) || i; o = (o.indexOf("%") > -1 ? r : 1) * parseInt(o, 10) || 0; i = s + o ? Math.min(Math.max(i, o), s) : i; e.css(f, Math.round(i)).appendTo(n) } this.drawing = 0; return this }, destroy: function () { this.bgiframe && this.bgiframe.remove(); this.qtip._unbind([e, this.qtip.tooltip], this._ns) } }); kt = x.ie6 = function (e) { return F.ie === 6 ? new At(e) : s }; kt.initialize = "render"; S.ie6 = { "^content|style$": function () { this.redraw() } }; }) })(window, document)
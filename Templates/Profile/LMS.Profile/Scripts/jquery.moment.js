(function (e) { function nt(e, t, n) { switch (arguments.length) { case 2: return e != null ? e : t; case 3: return e != null ? e : t != null ? t : n; default: throw new Error("Implement me") } } function rt(e, t) { return o.call(e, t) } function it() { return { empty: false, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: false, invalidMonth: null, invalidFormat: false, userInvalidated: false, iso: false } } function st(e) { if (t.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) { console.warn("Deprecation warning: " + e) } } function ot(e, t) { var n = true; return vt(function () { if (n) { st(e); n = false } return t.apply(this, arguments) }, t) } function ut(e, t) { if (!Z[e]) { st(t); Z[e] = true } } function at(e, t) { return function (n) { return yt(e.call(this, n), t) } } function ft(e, t) { return function (n) { return this.localeData().ordinal(e.call(this, n), t) } } function lt(e, t) { var n = (t.year() - e.year()) * 12 + (t.month() - e.month()), r = e.clone().add(n, "months"), i, s; if (t - r < 0) { i = e.clone().add(n - 1, "months"); s = (t - r) / (r - i) } else { i = e.clone().add(n + 1, "months"); s = (t - r) / (i - r) } return -(n + s) } function ct(e, t, n) { var r; if (n == null) { return t } if (e.meridiemHour != null) { return e.meridiemHour(t, n) } else if (e.isPM != null) { r = e.isPM(n); if (r && t < 12) { t += 12 } if (!r && t === 12) { t = 0 } return t } else { return t } } function ht() { } function pt(e, n) { if (n !== false) { Pt(e) } mt(this, e); this._d = new Date(+e._d); if (tt === false) { tt = true; t.updateOffset(this); tt = false } } function dt(e) { var n = kt(e), r = n.year || 0, i = n.quarter || 0, s = n.month || 0, o = n.week || 0, u = n.day || 0, a = n.hour || 0, f = n.minute || 0, l = n.second || 0, c = n.millisecond || 0; this._milliseconds = +c + l * 1e3 + f * 6e4 + a * 36e5; this._days = +u + o * 7; this._months = +s + i * 3 + r * 12; this._data = {}; this._locale = t.localeData(); this._bubble() } function vt(e, t) { for (var n in t) { if (rt(t, n)) { e[n] = t[n] } } if (rt(t, "toString")) { e.toString = t.toString } if (rt(t, "valueOf")) { e.valueOf = t.valueOf } return e } function mt(e, t) { var n, r, i; if (typeof t._isAMomentObject !== "undefined") { e._isAMomentObject = t._isAMomentObject } if (typeof t._i !== "undefined") { e._i = t._i } if (typeof t._f !== "undefined") { e._f = t._f } if (typeof t._l !== "undefined") { e._l = t._l } if (typeof t._strict !== "undefined") { e._strict = t._strict } if (typeof t._tzm !== "undefined") { e._tzm = t._tzm } if (typeof t._isUTC !== "undefined") { e._isUTC = t._isUTC } if (typeof t._offset !== "undefined") { e._offset = t._offset } if (typeof t._pf !== "undefined") { e._pf = t._pf } if (typeof t._locale !== "undefined") { e._locale = t._locale } if (m.length > 0) { for (n in m) { r = m[n]; i = t[r]; if (typeof i !== "undefined") { e[r] = i } } } return e } function gt(e) { if (e < 0) { return Math.ceil(e) } else { return Math.floor(e) } } function yt(e, t, n) { var r = "" + Math.abs(e), i = e >= 0; while (r.length < t) { r = "0" + r } return (i ? n ? "+" : "" : "-") + r } function bt(e, t) { var n = { milliseconds: 0, months: 0 }; n.months = t.month() - e.month() + (t.year() - e.year()) * 12; if (e.clone().add(n.months, "M").isAfter(t)) { --n.months } n.milliseconds = +t - +e.clone().add(n.months, "M"); return n } function wt(e, t) { var n; t = It(t, e); if (e.isBefore(t)) { n = bt(e, t) } else { n = bt(t, e); n.milliseconds = -n.milliseconds; n.months = -n.months } return n } function Et(e, n) { return function (r, i) { var s, o; if (i !== null && !isNaN(+i)) { ut(n, "moment()." + n + "(period, number) is deprecated. Please use moment()." + n + "(number, period)."); o = r; r = i; i = o } r = typeof r === "string" ? +r : r; s = t.duration(r, i); St(this, s, e); return this } } function St(e, n, r, i) { var s = n._milliseconds, o = n._days, u = n._months; i = i == null ? true : i; if (s) { e._d.setTime(+e._d + s * r) } if (o) { gn(e, "Date", mn(e, "Date") + o * r) } if (u) { vn(e, mn(e, "Month") + u * r) } if (i) { t.updateOffset(e, o || u) } } function xt(e) { return Object.prototype.toString.call(e) === "[object Array]" } function Tt(e) { return Object.prototype.toString.call(e) === "[object Date]" || e instanceof Date } function Nt(e, t, n) { var r = Math.min(e.length, t.length), i = Math.abs(e.length - t.length), s = 0, o; for (o = 0; o < r; o++) { if (n && e[o] !== t[o] || !n && At(e[o]) !== At(t[o])) { s++ } } return s + i } function Ct(e) { if (e) { var t = e.toLowerCase().replace(/(.)s$/, "$1"); e = V[e] || $[t] || t } return e } function kt(e) { var t = {}, n, r; for (r in e) { if (rt(e, r)) { n = Ct(r); if (n) { t[n] = e[r] } } } return t } function Lt(n) { var r, i; if (n.indexOf("week") === 0) { r = 7; i = "day" } else if (n.indexOf("month") === 0) { r = 12; i = "month" } else { return } t[n] = function (s, o) { var u, a, f = t._locale[n], l = []; if (typeof s === "number") { o = s; s = e } a = function (e) { var n = t().utc().set(i, e); return f.call(t._locale, n, s || "") }; if (o != null) { return a(o) } else { for (u = 0; u < r; u++) { l.push(a(u)) } return l } } } function At(e) { var t = +e, n = 0; if (t !== 0 && isFinite(t)) { if (t >= 0) { n = Math.floor(t) } else { n = Math.ceil(t) } } return n } function Ot(e, t) { return (new Date(Date.UTC(e, t + 1, 0))).getUTCDate() } function Mt(e, n, r) { return cn(t([e, 11, 31 + n - r]), n, r).week } function _t(e) { return Dt(e) ? 366 : 365 } function Dt(e) { return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0 } function Pt(e) { var t; if (e._a && e._pf.overflow === -2) { t = e._a[f] < 0 || e._a[f] > 11 ? f : e._a[l] < 1 || e._a[l] > Ot(e._a[a], e._a[f]) ? l : e._a[c] < 0 || e._a[c] > 24 || e._a[c] === 24 && (e._a[h] !== 0 || e._a[p] !== 0 || e._a[d] !== 0) ? c : e._a[h] < 0 || e._a[h] > 59 ? h : e._a[p] < 0 || e._a[p] > 59 ? p : e._a[d] < 0 || e._a[d] > 999 ? d : -1; if (e._pf._overflowDayOfYear && (t < a || t > l)) { t = l } e._pf.overflow = t } } function Ht(t) { if (t._isValid == null) { t._isValid = !isNaN(t._d.getTime()) && t._pf.overflow < 0 && !t._pf.empty && !t._pf.invalidMonth && !t._pf.nullInput && !t._pf.invalidFormat && !t._pf.userInvalidated; if (t._strict) { t._isValid = t._isValid && t._pf.charsLeftOver === 0 && t._pf.unusedTokens.length === 0 && t._pf.bigHour === e } } return t._isValid } function Bt(e) { return e ? e.toLowerCase().replace("_", "-") : e } function jt(e) { var t = 0, n, r, i, s; while (t < e.length) { s = Bt(e[t]).split("-"); n = s.length; r = Bt(e[t + 1]); r = r ? r.split("-") : null; while (n > 0) { i = Ft(s.slice(0, n).join("-")); if (i) { return i } if (r && r.length >= n && Nt(s, r, true) >= n - 1) { break } n-- } t++ } return null } function Ft(e) { var n = null; if (!v[e] && g) { try { n = t.locale(); require("./locale/" + e); t.locale(n) } catch (r) { } } return v[e] } function It(e, n) { var r, i; if (n._isUTC) { r = n.clone(); i = (t.isMoment(e) || Tt(e) ? +e : +t(e)) - +r; r._d.setTime(+r._d + i); t.updateOffset(r, false); return r } else { return t(e).local() } } function qt(e) { if (e.match(/\[[\s\S]/)) { return e.replace(/^\[|\]$/g, "") } return e.replace(/\\/g, "") } function Rt(e) { var t = e.match(E), n, r; for (n = 0, r = t.length; n < r; n++) { if (Y[t[n]]) { t[n] = Y[t[n]] } else { t[n] = qt(t[n]) } } return function (i) { var s = ""; for (n = 0; n < r; n++) { s += t[n] instanceof Function ? t[n].call(i, e) : t[n] } return s } } function Ut(e, t) { if (!e.isValid()) { return e.localeData().invalidDate() } t = zt(t, e.localeData()); if (!J[t]) { J[t] = Rt(t) } return J[t](e) } function zt(e, t) { function r(e) { return t.longDateFormat(e) || e } var n = 5; S.lastIndex = 0; while (n >= 0 && S.test(e)) { e = e.replace(S, r); S.lastIndex = 0; n -= 1 } return e } function Wt(e, t) { var n, r = t._strict; switch (e) { case "Q": return D; case "DDDD": return H; case "YYYY": case "GGGG": case "gggg": return r ? B : N; case "Y": case "G": case "g": return F; case "YYYYYY": case "YYYYY": case "GGGGG": case "ggggg": return r ? j : C; case "S": if (r) { return D }; case "SS": if (r) { return P }; case "SSS": if (r) { return H }; case "DDD": return T; case "MMM": case "MMMM": case "dd": case "ddd": case "dddd": return L; case "a": case "A": return t._locale._meridiemParse; case "x": return M; case "X": return _; case "Z": case "ZZ": return A; case "T": return O; case "SSSS": return k; case "MM": case "DD": case "YY": case "GG": case "gg": case "HH": case "hh": case "mm": case "ss": case "ww": case "WW": return r ? P : x; case "M": case "D": case "d": case "H": case "h": case "m": case "s": case "w": case "W": case "e": case "E": return x; case "Do": return r ? t._locale._ordinalParse : t._locale._ordinalParseLenient; default: n = new RegExp(Zt(Yt(e.replace("\\", "")), "i")); return n } } function Xt(e) { e = e || ""; var t = e.match(A) || [], n = t[t.length - 1] || [], r = (n + "").match(z) || ["-", 0, 0], i = +(r[1] * 60) + At(r[2]); return r[0] === "+" ? i : -i } function Vt(e, n, r) { var i, s = r._a; switch (e) { case "Q": if (n != null) { s[f] = (At(n) - 1) * 3 } break; case "M": case "MM": if (n != null) { s[f] = At(n) - 1 } break; case "MMM": case "MMMM": i = r._locale.monthsParse(n, e, r._strict); if (i != null) { s[f] = i } else { r._pf.invalidMonth = n } break; case "D": case "DD": if (n != null) { s[l] = At(n) } break; case "Do": if (n != null) { s[l] = At(parseInt(n.match(/\d{1,2}/)[0], 10)) } break; case "DDD": case "DDDD": if (n != null) { r._dayOfYear = At(n) } break; case "YY": s[a] = t.parseTwoDigitYear(n); break; case "YYYY": case "YYYYY": case "YYYYYY": s[a] = At(n); break; case "a": case "A": r._meridiem = n; break; case "h": case "hh": r._pf.bigHour = true; case "H": case "HH": s[c] = At(n); break; case "m": case "mm": s[h] = At(n); break; case "s": case "ss": s[p] = At(n); break; case "S": case "SS": case "SSS": case "SSSS": s[d] = At(("0." + n) * 1e3); break; case "x": r._d = new Date(At(n)); break; case "X": r._d = new Date(parseFloat(n) * 1e3); break; case "Z": case "ZZ": r._useUTC = true; r._tzm = Xt(n); break; case "dd": case "ddd": case "dddd": i = r._locale.weekdaysParse(n); if (i != null) { r._w = r._w || {}; r._w["d"] = i } else { r._pf.invalidWeekday = n } break; case "w": case "ww": case "W": case "WW": case "d": case "e": case "E": e = e.substr(0, 1); case "gggg": case "GGGG": case "GGGGG": e = e.substr(0, 2); if (n) { r._w = r._w || {}; r._w[e] = At(n) } break; case "gg": case "GG": r._w = r._w || {}; r._w[e] = t.parseTwoDigitYear(n) } } function $t(e) { var n, r, i, s, o, u, f; n = e._w; if (n.GG != null || n.W != null || n.E != null) { o = 1; u = 4; r = nt(n.GG, e._a[a], cn(t(), 1, 4).year); i = nt(n.W, 1); s = nt(n.E, 1) } else { o = e._locale._week.dow; u = e._locale._week.doy; r = nt(n.gg, e._a[a], cn(t(), o, u).year); i = nt(n.w, 1); if (n.d != null) { s = n.d; if (s < o) { ++i } } else if (n.e != null) { s = n.e + o } else { s = o } } f = hn(r, i, s, u, o); e._a[a] = f.year; e._dayOfYear = f.dayOfYear } function Jt(e) { var t, n, r = [], i, s; if (e._d) { return } i = Qt(e); if (e._w && e._a[l] == null && e._a[f] == null) { $t(e) } if (e._dayOfYear) { s = nt(e._a[a], i[a]); if (e._dayOfYear > _t(s)) { e._pf._overflowDayOfYear = true } n = un(s, 0, e._dayOfYear); e._a[f] = n.getUTCMonth(); e._a[l] = n.getUTCDate() } for (t = 0; t < 3 && e._a[t] == null; ++t) { e._a[t] = r[t] = i[t] } for (; t < 7; t++) { e._a[t] = r[t] = e._a[t] == null ? t === 2 ? 1 : 0 : e._a[t] } if (e._a[c] === 24 && e._a[h] === 0 && e._a[p] === 0 && e._a[d] === 0) { e._nextDay = true; e._a[c] = 0 } e._d = (e._useUTC ? un : on).apply(null, r); if (e._tzm != null) { e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm) } if (e._nextDay) { e._a[c] = 24 } } function Kt(e) { var t; if (e._d) { return } t = kt(e._i); e._a = [t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond]; Jt(e) } function Qt(e) { var t = new Date; if (e._useUTC) { return [t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()] } else { return [t.getFullYear(), t.getMonth(), t.getDate()] } } function Gt(n) { if (n._f === t.ISO_8601) { tn(n); return } n._a = []; n._pf.empty = true; var r = "" + n._i, i, s, o, u, a, f = r.length, l = 0; o = zt(n._f, n._locale).match(E) || []; for (i = 0; i < o.length; i++) { u = o[i]; s = (r.match(Wt(u, n)) || [])[0]; if (s) { a = r.substr(0, r.indexOf(s)); if (a.length > 0) { n._pf.unusedInput.push(a) } r = r.slice(r.indexOf(s) + s.length); l += s.length } if (Y[u]) { if (s) { n._pf.empty = false } else { n._pf.unusedTokens.push(u) } Vt(u, s, n) } else if (n._strict && !s) { n._pf.unusedTokens.push(u) } } n._pf.charsLeftOver = f - l; if (r.length > 0) { n._pf.unusedInput.push(r) } if (n._pf.bigHour === true && n._a[c] <= 12) { n._pf.bigHour = e } n._a[c] = ct(n._locale, n._a[c], n._meridiem); Jt(n); Pt(n) } function Yt(e) { return e.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (e, t, n, r, i) { return t || n || r || i }) } function Zt(e) { return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") } function en(e) { var t, n, r, i, s; if (e._f.length === 0) { e._pf.invalidFormat = true; e._d = new Date(NaN); return } for (i = 0; i < e._f.length; i++) { s = 0; t = mt({}, e); if (e._useUTC != null) { t._useUTC = e._useUTC } t._pf = it(); t._f = e._f[i]; Gt(t); if (!Ht(t)) { continue } s += t._pf.charsLeftOver; s += t._pf.unusedTokens.length * 10; t._pf.score = s; if (r == null || s < r) { r = s; n = t } } vt(e, n || t) } function tn(e) { var t, n, r = e._i, i = I.exec(r); if (i) { e._pf.iso = true; for (t = 0, n = R.length; t < n; t++) { if (R[t][1].exec(r)) { e._f = R[t][0] + (i[6] || " "); break } } for (t = 0, n = U.length; t < n; t++) { if (U[t][1].exec(r)) { e._f += U[t][0]; break } } if (r.match(A)) { e._f += "Z" } Gt(e) } else { e._isValid = false } } function nn(e) { tn(e); if (e._isValid === false) { delete e._isValid; t.createFromInputFallback(e) } } function rn(e, t) { var n = [], r; for (r = 0; r < e.length; ++r) { n.push(t(e[r], r)) } return n } function sn(n) { var r = n._i, i; if (r === e) { n._d = new Date } else if (Tt(r)) { n._d = new Date(+r) } else if ((i = y.exec(r)) !== null) { n._d = new Date(+i[1]) } else if (typeof r === "string") { nn(n) } else if (xt(r)) { n._a = rn(r.slice(0), function (e) { return parseInt(e, 10) }); Jt(n) } else if (typeof r === "object") { Kt(n) } else if (typeof r === "number") { n._d = new Date(r) } else { t.createFromInputFallback(n) } } function on(e, t, n, r, i, s, o) { var u = new Date(e, t, n, r, i, s, o); if (e < 1970) { u.setFullYear(e) } return u } function un(e) { var t = new Date(Date.UTC.apply(null, arguments)); if (e < 1970) { t.setUTCFullYear(e) } return t } function an(e, t) { if (typeof e === "string") { if (!isNaN(e)) { e = parseInt(e, 10) } else { e = t.weekdaysParse(e); if (typeof e !== "number") { return null } } } return e } function fn(e, t, n, r, i) { return i.relativeTime(t || 1, !!n, e, r) } function ln(e, n, r) { var i = t.duration(e).abs(), o = s(i.as("s")), u = s(i.as("m")), a = s(i.as("h")), f = s(i.as("d")), l = s(i.as("M")), c = s(i.as("y")), h = o < K.s && ["s", o] || u === 1 && ["m"] || u < K.m && ["mm", u] || a === 1 && ["h"] || a < K.h && ["hh", a] || f === 1 && ["d"] || f < K.d && ["dd", f] || l === 1 && ["M"] || l < K.M && ["MM", l] || c === 1 && ["y"] || ["yy", c]; h[2] = n; h[3] = +e > 0; h[4] = r; return fn.apply({}, h) } function cn(e, n, r) { var i = r - n, s = r - e.day(), o; if (s > i) { s -= 7 } if (s < i - 7) { s += 7 } o = t(e).add(s, "d"); return { week: Math.ceil(o.dayOfYear() / 7), year: o.year() } } function hn(e, t, n, r, i) { var s = un(e, 0, 1).getUTCDay(), o, u; s = s === 0 ? 7 : s; n = n != null ? n : i; o = i - s + (s > r ? 7 : 0) - (s < i ? 7 : 0); u = 7 * (t - 1) + (n - i) + o + 1; return { year: u > 0 ? e : e - 1, dayOfYear: u > 0 ? u : _t(e - 1) + u } } function pn(n) { var r = n._i, i = n._f, s; n._locale = n._locale || t.localeData(n._l); if (r === null || i === e && r === "") { return t.invalid({ nullInput: true }) } if (typeof r === "string") { n._i = r = n._locale.preparse(r) } if (t.isMoment(r)) { return new pt(r, true) } else if (i) { if (xt(i)) { en(n) } else { Gt(n) } } else { sn(n) } s = new pt(n); if (s._nextDay) { s.add(1, "d"); s._nextDay = e } return s } function dn(e, n) { var r, i; if (n.length === 1 && xt(n[0])) { n = n[0] } if (!n.length) { return t() } r = n[0]; for (i = 1; i < n.length; ++i) { if (n[i][e](r)) { r = n[i] } } return r } function vn(e, t) { var n; if (typeof t === "string") { t = e.localeData().monthsParse(t); if (typeof t !== "number") { return e } } n = Math.min(e.date(), Ot(e.year(), t)); e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, n); return e } function mn(e, t) { return e._d["get" + (e._isUTC ? "UTC" : "") + t]() } function gn(e, t, n) { if (t === "Month") { return vn(e, n) } else { return e._d["set" + (e._isUTC ? "UTC" : "") + t](n) } } function yn(e, n) { return function (r) { if (r != null) { gn(this, e, r); t.updateOffset(this, n); return this } else { return mn(this, e) } } } function bn(e) { return e * 400 / 146097 } function wn(e) { return e * 146097 / 400 } function En(e) { t.duration.fn[e] = function () { return this._data[e] } } function Sn(e) { if (typeof ender !== "undefined") { return } i = r.moment; if (e) { r.moment = ot("Accessing Moment through the global scope is " + "deprecated, and will be removed in an upcoming " + "release.", t) } else { r.moment = t } } var t, n = "2.9.0", r = typeof global !== "undefined" && (typeof window === "undefined" || window === global.window) ? global : this, i, s = Math.round, o = Object.prototype.hasOwnProperty, u, a = 0, f = 1, l = 2, c = 3, h = 4, p = 5, d = 6, v = {}, m = [], g = typeof module !== "undefined" && module && module.exports, y = /^\/?Date\((\-?\d+)/i, b = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, w = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, E = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g, S = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, x = /\d\d?/, T = /\d{1,3}/, N = /\d{1,4}/, C = /[+\-]?\d{1,6}/, k = /\d+/, L = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, A = /Z|[\+\-]\d\d:?\d\d/gi, O = /T/i, M = /[\+\-]?\d+/, _ = /[\+\-]?\d+(\.\d{1,3})?/, D = /\d/, P = /\d\d/, H = /\d{3}/, B = /\d{4}/, j = /[+-]?\d{6}/, F = /[+-]?\d+/, I = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, q = "YYYY-MM-DDTHH:mm:ssZ", R = [["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/], ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/], ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/], ["GGGG-[W]WW", /\d{4}-W\d{2}/], ["YYYY-DDD", /\d{4}-\d{3}/]], U = [["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/], ["HH:mm", /(T| )\d\d:\d\d/], ["HH", /(T| )\d\d/]], z = /([\+\-]|\d\d)/gi, W = "Date|Hours|Minutes|Seconds|Milliseconds".split("|"), X = { Milliseconds: 1, Seconds: 1e3, Minutes: 6e4, Hours: 36e5, Days: 864e5, Months: 2592e6, Years: 31536e6 }, V = { ms: "millisecond", s: "second", m: "minute", h: "hour", d: "day", D: "date", w: "week", W: "isoWeek", M: "month", Q: "quarter", y: "year", DDD: "dayOfYear", e: "weekday", E: "isoWeekday", gg: "weekYear", GG: "isoWeekYear" }, $ = { dayofyear: "dayOfYear", isoweekday: "isoWeekday", isoweek: "isoWeek", weekyear: "weekYear", isoweekyear: "isoWeekYear" }, J = {}, K = { s: 45, m: 45, h: 22, d: 26, M: 11 }, Q = "DDD w W M D d".split(" "), G = "M D H h m s w W".split(" "), Y = { M: function () { return this.month() + 1 }, MMM: function (e) { return this.localeData().monthsShort(this, e) }, MMMM: function (e) { return this.localeData().months(this, e) }, D: function () { return this.date() }, DDD: function () { return this.dayOfYear() }, d: function () { return this.day() }, dd: function (e) { return this.localeData().weekdaysMin(this, e) }, ddd: function (e) { return this.localeData().weekdaysShort(this, e) }, dddd: function (e) { return this.localeData().weekdays(this, e) }, w: function () { return this.week() }, W: function () { return this.isoWeek() }, YY: function () { return yt(this.year() % 100, 2) }, YYYY: function () { return yt(this.year(), 4) }, YYYYY: function () { return yt(this.year(), 5) }, YYYYYY: function () { var e = this.year(), t = e >= 0 ? "+" : "-"; return t + yt(Math.abs(e), 6) }, gg: function () { return yt(this.weekYear() % 100, 2) }, gggg: function () { return yt(this.weekYear(), 4) }, ggggg: function () { return yt(this.weekYear(), 5) }, GG: function () { return yt(this.isoWeekYear() % 100, 2) }, GGGG: function () { return yt(this.isoWeekYear(), 4) }, GGGGG: function () { return yt(this.isoWeekYear(), 5) }, e: function () { return this.weekday() }, E: function () { return this.isoWeekday() }, a: function () { return this.localeData().meridiem(this.hours(), this.minutes(), true) }, A: function () { return this.localeData().meridiem(this.hours(), this.minutes(), false) }, H: function () { return this.hours() }, h: function () { return this.hours() % 12 || 12 }, m: function () { return this.minutes() }, s: function () { return this.seconds() }, S: function () { return At(this.milliseconds() / 100) }, SS: function () { return yt(At(this.milliseconds() / 10), 2) }, SSS: function () { return yt(this.milliseconds(), 3) }, SSSS: function () { return yt(this.milliseconds(), 3) }, Z: function () { var e = this.utcOffset(), t = "+"; if (e < 0) { e = -e; t = "-" } return t + yt(At(e / 60), 2) + ":" + yt(At(e) % 60, 2) }, ZZ: function () { var e = this.utcOffset(), t = "+"; if (e < 0) { e = -e; t = "-" } return t + yt(At(e / 60), 2) + yt(At(e) % 60, 2) }, z: function () { return this.zoneAbbr() }, zz: function () { return this.zoneName() }, x: function () { return this.valueOf() }, X: function () { return this.unix() }, Q: function () { return this.quarter() } }, Z = {}, et = ["months", "monthsShort", "weekdays", "weekdaysShort", "weekdaysMin"], tt = false; while (Q.length) { u = Q.pop(); Y[u + "o"] = ft(Y[u], u) } while (G.length) { u = G.pop(); Y[u + u] = at(Y[u], 2) } Y.DDDD = at(Y.DDD, 3); vt(ht.prototype, { set: function (e) { var t, n; for (n in e) { t = e[n]; if (typeof t === "function") { this[n] = t } else { this["_" + n] = t } } this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source) }, _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), months: function (e) { return this._months[e.month()] }, _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), monthsShort: function (e) { return this._monthsShort[e.month()] }, monthsParse: function (e, n, r) { var i, s, o; if (!this._monthsParse) { this._monthsParse = []; this._longMonthsParse = []; this._shortMonthsParse = [] } for (i = 0; i < 12; i++) { s = t.utc([2e3, i]); if (r && !this._longMonthsParse[i]) { this._longMonthsParse[i] = new RegExp("^" + this.months(s, "").replace(".", "") + "$", "i"); this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(s, "").replace(".", "") + "$", "i") } if (!r && !this._monthsParse[i]) { o = "^" + this.months(s, "") + "|^" + this.monthsShort(s, ""); this._monthsParse[i] = new RegExp(o.replace(".", ""), "i") } if (r && n === "MMMM" && this._longMonthsParse[i].test(e)) { return i } else if (r && n === "MMM" && this._shortMonthsParse[i].test(e)) { return i } else if (!r && this._monthsParse[i].test(e)) { return i } } }, _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdays: function (e) { return this._weekdays[e.day()] }, _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysShort: function (e) { return this._weekdaysShort[e.day()] }, _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), weekdaysMin: function (e) { return this._weekdaysMin[e.day()] }, weekdaysParse: function (e) { var n, r, i; if (!this._weekdaysParse) { this._weekdaysParse = [] } for (n = 0; n < 7; n++) { if (!this._weekdaysParse[n]) { r = t([2e3, 1]).day(n); i = "^" + this.weekdays(r, "") + "|^" + this.weekdaysShort(r, "") + "|^" + this.weekdaysMin(r, ""); this._weekdaysParse[n] = new RegExp(i.replace(".", ""), "i") } if (this._weekdaysParse[n].test(e)) { return n } } }, _longDateFormat: { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY LT", LLLL: "dddd, MMMM D, YYYY LT" }, longDateFormat: function (e) { var t = this._longDateFormat[e]; if (!t && this._longDateFormat[e.toUpperCase()]) { t = this._longDateFormat[e.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (e) { return e.slice(1) }); this._longDateFormat[e] = t } return t }, isPM: function (e) { return (e + "").toLowerCase().charAt(0) === "p" }, _meridiemParse: /[ap]\.?m?\.?/i, meridiem: function (e, t, n) { if (e > 11) { return n ? "pm" : "PM" } else { return n ? "am" : "AM" } }, _calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, calendar: function (e, t, n) { var r = this._calendar[e]; return typeof r === "function" ? r.apply(t, [n]) : r }, _relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, relativeTime: function (e, t, n, r) { var i = this._relativeTime[n]; return typeof i === "function" ? i(e, t, n, r) : i.replace(/%d/i, e) }, pastFuture: function (e, t) { var n = this._relativeTime[e > 0 ? "future" : "past"]; return typeof n === "function" ? n(t) : n.replace(/%s/i, t) }, ordinal: function (e) { return this._ordinal.replace("%d", e) }, _ordinal: "%d", _ordinalParse: /\d{1,2}/, preparse: function (e) { return e }, postformat: function (e) { return e }, week: function (e) { return cn(e, this._week.dow, this._week.doy).week }, _week: { dow: 0, doy: 6 }, firstDayOfWeek: function () { return this._week.dow }, firstDayOfYear: function () { return this._week.doy }, _invalidDate: "Invalid date", invalidDate: function () { return this._invalidDate } }); t = function (t, n, r, i) { var s; if (typeof r === "boolean") { i = r; r = e } s = {}; s._isAMomentObject = true; s._i = t; s._f = n; s._l = r; s._strict = i; s._isUTC = false; s._pf = it(); return pn(s) }; t.suppressDeprecationWarnings = false; t.createFromInputFallback = ot("moment construction falls back to js Date. This is " + "discouraged and will be removed in upcoming major " + "release. Please refer to " + "https://github.com/moment/moment/issues/1407 for more info.", function (e) { e._d = new Date(e._i + (e._useUTC ? " UTC" : "")) }); t.min = function () { var e = [].slice.call(arguments, 0); return dn("isBefore", e) }; t.max = function () { var e = [].slice.call(arguments, 0); return dn("isAfter", e) }; t.utc = function (t, n, r, i) { var s; if (typeof r === "boolean") { i = r; r = e } s = {}; s._isAMomentObject = true; s._useUTC = true; s._isUTC = true; s._l = r; s._i = t; s._f = n; s._strict = i; s._pf = it(); return pn(s).utc() }; t.unix = function (e) { return t(e * 1e3) }; t.duration = function (e, n) { var r = e, i = null, s, o, u, a; if (t.isDuration(e)) { r = { ms: e._milliseconds, d: e._days, M: e._months } } else if (typeof e === "number") { r = {}; if (n) { r[n] = e } else { r.milliseconds = e } } else if (!!(i = b.exec(e))) { s = i[1] === "-" ? -1 : 1; r = { y: 0, d: At(i[l]) * s, h: At(i[c]) * s, m: At(i[h]) * s, s: At(i[p]) * s, ms: At(i[d]) * s } } else if (!!(i = w.exec(e))) { s = i[1] === "-" ? -1 : 1; u = function (e) { var t = e && parseFloat(e.replace(",", ".")); return (isNaN(t) ? 0 : t) * s }; r = { y: u(i[2]), M: u(i[3]), d: u(i[4]), h: u(i[5]), m: u(i[6]), s: u(i[7]), w: u(i[8]) } } else if (r == null) { r = {} } else if (typeof r === "object" && ("from" in r || "to" in r)) { a = wt(t(r.from), t(r.to)); r = {}; r.ms = a.milliseconds; r.M = a.months } o = new dt(r); if (t.isDuration(e) && rt(e, "_locale")) { o._locale = e._locale } return o }; t.version = n; t.defaultFormat = q; t.ISO_8601 = function () { }; t.momentProperties = m; t.updateOffset = function () { }; t.relativeTimeThreshold = function (t, n) { if (K[t] === e) { return false } if (n === e) { return K[t] } K[t] = n; return true }; t.lang = ot("moment.lang is deprecated. Use moment.locale instead.", function (e, n) { return t.locale(e, n) }); t.locale = function (e, n) { var r; if (e) { if (typeof n !== "undefined") { r = t.defineLocale(e, n) } else { r = t.localeData(e) } if (r) { t.duration._locale = t._locale = r } } return t._locale._abbr }; t.defineLocale = function (e, n) { if (n !== null) { n.abbr = e; if (!v[e]) { v[e] = new ht } v[e].set(n); t.locale(e); return v[e] } else { delete v[e]; return null } }; t.langData = ot("moment.langData is deprecated. Use moment.localeData instead.", function (e) { return t.localeData(e) }); t.localeData = function (e) { var n; if (e && e._locale && e._locale._abbr) { e = e._locale._abbr } if (!e) { return t._locale } if (!xt(e)) { n = Ft(e); if (n) { return n } e = [e] } return jt(e) }; t.isMoment = function (e) { return e instanceof pt || e != null && rt(e, "_isAMomentObject") }; t.isDuration = function (e) { return e instanceof dt }; for (u = et.length - 1; u >= 0; --u) { Lt(et[u]) } t.normalizeUnits = function (e) { return Ct(e) }; t.invalid = function (e) { var n = t.utc(NaN); if (e != null) { vt(n._pf, e) } else { n._pf.userInvalidated = true } return n }; t.parseZone = function () { return t.apply(null, arguments).parseZone() }; t.parseTwoDigitYear = function (e) { return At(e) + (At(e) > 68 ? 1900 : 2e3) }; t.isDate = Tt; vt(t.fn = pt.prototype, { clone: function () { return t(this) }, valueOf: function () { return +this._d - (this._offset || 0) * 6e4 }, unix: function () { return Math.floor(+this / 1e3) }, toString: function () { return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ") }, toDate: function () { return this._offset ? new Date(+this) : this._d }, toISOString: function () { var e = t(this).utc(); if (0 < e.year() && e.year() <= 9999) { if ("function" === typeof Date.prototype.toISOString) { return this.toDate().toISOString() } else { return Ut(e, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") } } else { return Ut(e, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]") } }, toArray: function () { var e = this; return [e.year(), e.month(), e.date(), e.hours(), e.minutes(), e.seconds(), e.milliseconds()] }, isValid: function () { return Ht(this) }, isDSTShifted: function () { if (this._a) { return this.isValid() && Nt(this._a, (this._isUTC ? t.utc(this._a) : t(this._a)).toArray()) > 0 } return false }, parsingFlags: function () { return vt({}, this._pf) }, invalidAt: function () { return this._pf.overflow }, utc: function (e) { return this.utcOffset(0, e) }, local: function (e) { if (this._isUTC) { this.utcOffset(0, e); this._isUTC = false; if (e) { this.subtract(this._dateUtcOffset(), "m") } } return this }, format: function (e) { var n = Ut(this, e || t.defaultFormat); return this.localeData().postformat(n) }, add: Et(1, "add"), subtract: Et(-1, "subtract"), diff: function (e, t, n) { var r = It(e, this), i = (r.utcOffset() - this.utcOffset()) * 6e4, s, o, u, a; t = Ct(t); if (t === "year" || t === "month" || t === "quarter") { u = lt(this, r); if (t === "quarter") { u = u / 3 } else if (t === "year") { u = u / 12 } } else { o = this - r; u = t === "second" ? o / 1e3 : t === "minute" ? o / 6e4 : t === "hour" ? o / 36e5 : t === "day" ? (o - i) / 864e5 : t === "week" ? (o - i) / 6048e5 : o } return n ? u : gt(u) }, from: function (e, n) { return t.duration({ to: this, from: e }).locale(this.locale()).humanize(!n) }, fromNow: function (e) { return this.from(t(), e) }, calendar: function (e) { var n = e || t(), r = It(n, this).startOf("day"), i = this.diff(r, "days", true), s = i < -6 ? "sameElse" : i < -1 ? "lastWeek" : i < 0 ? "lastDay" : i < 1 ? "sameDay" : i < 2 ? "nextDay" : i < 7 ? "nextWeek" : "sameElse"; return this.format(this.localeData().calendar(s, this, t(n))) }, isLeapYear: function () { return Dt(this.year()) }, isDST: function () { return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset() }, day: function (e) { var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay(); if (e != null) { e = an(e, this.localeData()); return this.add(e - t, "d") } else { return t } }, month: yn("Month", true), startOf: function (e) { e = Ct(e); switch (e) { case "year": this.month(0); case "quarter": case "month": this.date(1); case "week": case "isoWeek": case "day": this.hours(0); case "hour": this.minutes(0); case "minute": this.seconds(0); case "second": this.milliseconds(0) } if (e === "week") { this.weekday(0) } else if (e === "isoWeek") { this.isoWeekday(1) } if (e === "quarter") { this.month(Math.floor(this.month() / 3) * 3) } return this }, endOf: function (t) { t = Ct(t); if (t === e || t === "millisecond") { return this } return this.startOf(t).add(1, t === "isoWeek" ? "week" : t).subtract(1, "ms") }, isAfter: function (e, n) { var r; n = Ct(typeof n !== "undefined" ? n : "millisecond"); if (n === "millisecond") { e = t.isMoment(e) ? e : t(e); return +this > +e } else { r = t.isMoment(e) ? +e : +t(e); return r < +this.clone().startOf(n) } }, isBefore: function (e, n) { var r; n = Ct(typeof n !== "undefined" ? n : "millisecond"); if (n === "millisecond") { e = t.isMoment(e) ? e : t(e); return +this < +e } else { r = t.isMoment(e) ? +e : +t(e); return +this.clone().endOf(n) < r } }, isBetween: function (e, t, n) { return this.isAfter(e, n) && this.isBefore(t, n) }, isSame: function (e, n) { var r; n = Ct(n || "millisecond"); if (n === "millisecond") { e = t.isMoment(e) ? e : t(e); return +this === +e } else { r = +t(e); return +this.clone().startOf(n) <= r && r <= +this.clone().endOf(n) } }, min: ot("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548", function (e) { e = t.apply(null, arguments); return e < this ? this : e }), max: ot("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548", function (e) { e = t.apply(null, arguments); return e > this ? this : e }), zone: ot("moment().zone is deprecated, use moment().utcOffset instead. " + "https://github.com/moment/moment/issues/1779", function (e, t) { if (e != null) { if (typeof e !== "string") { e = -e } this.utcOffset(e, t); return this } else { return -this.utcOffset() } }), utcOffset: function (e, n) { var r = this._offset || 0, i; if (e != null) { if (typeof e === "string") { e = Xt(e) } if (Math.abs(e) < 16) { e = e * 60 } if (!this._isUTC && n) { i = this._dateUtcOffset() } this._offset = e; this._isUTC = true; if (i != null) { this.add(i, "m") } if (r !== e) { if (!n || this._changeInProgress) { St(this, t.duration(e - r, "m"), 1, false) } else if (!this._changeInProgress) { this._changeInProgress = true; t.updateOffset(this, true); this._changeInProgress = null } } return this } else { return this._isUTC ? r : this._dateUtcOffset() } }, isLocal: function () { return !this._isUTC }, isUtcOffset: function () { return this._isUTC }, isUtc: function () { return this._isUTC && this._offset === 0 }, zoneAbbr: function () { return this._isUTC ? "UTC" : "" }, zoneName: function () { return this._isUTC ? "Coordinated Universal Time" : "" }, parseZone: function () { if (this._tzm) { this.utcOffset(this._tzm) } else if (typeof this._i === "string") { this.utcOffset(Xt(this._i)) } return this }, hasAlignedHourOffset: function (e) { if (!e) { e = 0 } else { e = t(e).utcOffset() } return (this.utcOffset() - e) % 60 === 0 }, daysInMonth: function () { return Ot(this.year(), this.month()) }, dayOfYear: function (e) { var n = s((t(this).startOf("day") - t(this).startOf("year")) / 864e5) + 1; return e == null ? n : this.add(e - n, "d") }, quarter: function (e) { return e == null ? Math.ceil((this.month() + 1) / 3) : this.month((e - 1) * 3 + this.month() % 3) }, weekYear: function (e) { var t = cn(this, this.localeData()._week.dow, this.localeData()._week.doy).year; return e == null ? t : this.add(e - t, "y") }, isoWeekYear: function (e) { var t = cn(this, 1, 4).year; return e == null ? t : this.add(e - t, "y") }, week: function (e) { var t = this.localeData().week(this); return e == null ? t : this.add((e - t) * 7, "d") }, isoWeek: function (e) { var t = cn(this, 1, 4).week; return e == null ? t : this.add((e - t) * 7, "d") }, weekday: function (e) { var t = (this.day() + 7 - this.localeData()._week.dow) % 7; return e == null ? t : this.add(e - t, "d") }, isoWeekday: function (e) { return e == null ? this.day() || 7 : this.day(this.day() % 7 ? e : e - 7) }, isoWeeksInYear: function () { return Mt(this.year(), 1, 4) }, weeksInYear: function () { var e = this.localeData()._week; return Mt(this.year(), e.dow, e.doy) }, get: function (e) { e = Ct(e); return this[e]() }, set: function (e, t) { var n; if (typeof e === "object") { for (n in e) { this.set(n, e[n]) } } else { e = Ct(e); if (typeof this[e] === "function") { this[e](t) } } return this }, locale: function (n) { var r; if (n === e) { return this._locale._abbr } else { r = t.localeData(n); if (r != null) { this._locale = r } return this } }, lang: ot("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (t) { if (t === e) { return this.localeData() } else { return this.locale(t) } }), localeData: function () { return this._locale }, _dateUtcOffset: function () { return -Math.round(this._d.getTimezoneOffset() / 15) * 15 } }); t.fn.millisecond = t.fn.milliseconds = yn("Milliseconds", false); t.fn.second = t.fn.seconds = yn("Seconds", false); t.fn.minute = t.fn.minutes = yn("Minutes", false); t.fn.hour = t.fn.hours = yn("Hours", true); t.fn.date = yn("Date", true); t.fn.dates = ot("dates accessor is deprecated. Use date instead.", yn("Date", true)); t.fn.year = yn("FullYear", true); t.fn.years = ot("years accessor is deprecated. Use year instead.", yn("FullYear", true)); t.fn.days = t.fn.day; t.fn.months = t.fn.month; t.fn.weeks = t.fn.week; t.fn.isoWeeks = t.fn.isoWeek; t.fn.quarters = t.fn.quarter; t.fn.toJSON = t.fn.toISOString; t.fn.isUTC = t.fn.isUtc; vt(t.duration.fn = dt.prototype, { _bubble: function () { var e = this._milliseconds, t = this._days, n = this._months, r = this._data, i, s, o, u = 0; r.milliseconds = e % 1e3; i = gt(e / 1e3); r.seconds = i % 60; s = gt(i / 60); r.minutes = s % 60; o = gt(s / 60); r.hours = o % 24; t += gt(o / 24); u = gt(bn(t)); t -= gt(wn(u)); n += gt(t / 30); t %= 30; u += gt(n / 12); n %= 12; r.days = t; r.months = n; r.years = u }, abs: function () { this._milliseconds = Math.abs(this._milliseconds); this._days = Math.abs(this._days); this._months = Math.abs(this._months); this._data.milliseconds = Math.abs(this._data.milliseconds); this._data.seconds = Math.abs(this._data.seconds); this._data.minutes = Math.abs(this._data.minutes); this._data.hours = Math.abs(this._data.hours); this._data.months = Math.abs(this._data.months); this._data.years = Math.abs(this._data.years); return this }, weeks: function () { return gt(this.days() / 7) }, valueOf: function () { return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + At(this._months / 12) * 31536e6 }, humanize: function (e) { var t = ln(this, !e, this.localeData()); if (e) { t = this.localeData().pastFuture(+this, t) } return this.localeData().postformat(t) }, add: function (e, n) { var r = t.duration(e, n); this._milliseconds += r._milliseconds; this._days += r._days; this._months += r._months; this._bubble(); return this }, subtract: function (e, n) { var r = t.duration(e, n); this._milliseconds -= r._milliseconds; this._days -= r._days; this._months -= r._months; this._bubble(); return this }, get: function (e) { e = Ct(e); return this[e.toLowerCase() + "s"]() }, as: function (e) { var t, n; e = Ct(e); if (e === "month" || e === "year") { t = this._days + this._milliseconds / 864e5; n = this._months + bn(t) * 12; return e === "month" ? n : n / 12 } else { t = this._days + Math.round(wn(this._months / 12)); switch (e) { case "week": return t / 7 + this._milliseconds / 6048e5; case "day": return t + this._milliseconds / 864e5; case "hour": return t * 24 + this._milliseconds / 36e5; case "minute": return t * 24 * 60 + this._milliseconds / 6e4; case "second": return t * 24 * 60 * 60 + this._milliseconds / 1e3; case "millisecond": return Math.floor(t * 24 * 60 * 60 * 1e3) + this._milliseconds; default: throw new Error("Unknown unit " + e) } } }, lang: t.fn.lang, locale: t.fn.locale, toIsoString: ot("toIsoString() is deprecated. Please use toISOString() instead " + "(notice the capitals)", function () { return this.toISOString() }), toISOString: function () { var e = Math.abs(this.years()), t = Math.abs(this.months()), n = Math.abs(this.days()), r = Math.abs(this.hours()), i = Math.abs(this.minutes()), s = Math.abs(this.seconds() + this.milliseconds() / 1e3); if (!this.asSeconds()) { return "P0D" } return (this.asSeconds() < 0 ? "-" : "") + "P" + (e ? e + "Y" : "") + (t ? t + "M" : "") + (n ? n + "D" : "") + (r || i || s ? "T" : "") + (r ? r + "H" : "") + (i ? i + "M" : "") + (s ? s + "S" : "") }, localeData: function () { return this._locale }, toJSON: function () { return this.toISOString() } }); t.duration.fn.toString = t.duration.fn.toISOString; for (u in X) { if (rt(X, u)) { En(u.toLowerCase()) } } t.duration.fn.asMilliseconds = function () { return this.as("ms") }; t.duration.fn.asSeconds = function () { return this.as("s") }; t.duration.fn.asMinutes = function () { return this.as("m") }; t.duration.fn.asHours = function () { return this.as("h") }; t.duration.fn.asDays = function () { return this.as("d") }; t.duration.fn.asWeeks = function () { return this.as("weeks") }; t.duration.fn.asMonths = function () { return this.as("M") }; t.duration.fn.asYears = function () { return this.as("y") }; t.locale("en", { ordinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function (e) { var t = e % 10, n = At(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th"; return e + n } }); (function (e) { e(t) })(function (e) { return e.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function (e) { return /^nm$/i.test(e) }, meridiem: function (e, t, n) { if (e < 12) { return n ? "vm" : "VM" } else { return n ? "nm" : "NM" } }, longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[Môre om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (e === 1 || e === 8 || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ar-ma", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, n = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }; return e.defineLocale("ar-sa", { months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, meridiemParse: /ص|م/, isPM: function (e) { return "م" === e }, meridiem: function (e, t, n) { if (e < 12) { return "ص" } else { return "م" } }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function (e) { return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (e) { return n[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ar-tn", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, n = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, r = function (e) { return e === 0 ? 0 : e === 1 ? 1 : e === 2 ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5 }, i = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, s = function (e) { return function (t, n, s, o) { var u = r(t), a = i[e][r(t)]; if (u === 2) { a = a[n ? 0 : 1] } return a.replace(/%d/i, t) } }, o = ["كانون الثاني يناير", "شباط فبراير", "آذار مارس", "نيسان أبريل", "أيار مايو", "حزيران يونيو", "تموز يوليو", "آب أغسطس", "أيلول سبتمبر", "تشرين الأول أكتوبر", "تشرين الثاني نوفمبر", "كانون الأول ديسمبر"]; return e.defineLocale("ar", { months: o, monthsShort: o, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, meridiemParse: /ص|م/, isPM: function (e) { return "م" === e }, meridiem: function (e, t, n) { if (e < 12) { return "ص" } else { return "م" } }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: s("s"), m: s("m"), mm: s("m"), h: s("h"), hh: s("h"), d: s("d"), dd: s("d"), M: s("M"), MM: s("M"), y: s("y"), yy: s("y") }, preparse: function (e) { return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (e) { return n[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "-inci", 5: "-inci", 8: "-inci", 70: "-inci", 80: "-inci", 2: "-nci", 7: "-nci", 20: "-nci", 50: "-nci", 3: "-üncü", 4: "-üncü", 100: "-üncü", 6: "-ncı", 9: "-uncu", 10: "-uncu", 30: "-uncu", 60: "-ıncı", 90: "-ıncı" }; return e.defineLocale("az", { months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"), monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"), weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"), weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"), weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[sabah saat] LT", nextWeek: "[gələn həftə] dddd [saat] LT", lastDay: "[dünən] LT", lastWeek: "[keçən həftə] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s əvvəl", s: "birneçə saniyyə", m: "bir dəqiqə", mm: "%d dəqiqə", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir il", yy: "%d il" }, meridiemParse: /gecə|səhər|gündüz|axşam/, isPM: function (e) { return /^(gündüz|axşam)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "gecə" } else if (e < 12) { return "səhər" } else if (e < 17) { return "gündüz" } else { return "axşam" } }, ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/, ordinal: function (e) { if (e === 0) { return e + "-ıncı" } var n = e % 10, r = e % 100 - n, i = e >= 100 ? 100 : null; return e + (t[n] || t[r] || t[i]) }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function t(e, t) { var n = e.split("_"); return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2] } function n(e, n, r) { var i = { mm: n ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін", hh: n ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін", dd: "дзень_дні_дзён", MM: "месяц_месяцы_месяцаў", yy: "год_гады_гадоў" }; if (r === "m") { return n ? "хвіліна" : "хвіліну" } else if (r === "h") { return n ? "гадзіна" : "гадзіну" } else { return e + " " + t(i[r], +e) } } function r(e, t) { var n = { nominative: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_"), accusative: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_") }, r = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function i(e, t) { var n = { nominative: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"), accusative: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_") }, r = /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/.test(t) ? "accusative" : "nominative"; return n[r][e.day()] } return e.defineLocale("be", { months: r, monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"), weekdays: i, weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"), weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., LT", LLLL: "dddd, D MMMM YYYY г., LT" }, calendar: { sameDay: "[Сёння ў] LT", nextDay: "[Заўтра ў] LT", lastDay: "[Учора ў] LT", nextWeek: function () { return "[У] dddd [ў] LT" }, lastWeek: function () { switch (this.day()) { case 0: case 3: case 5: case 6: return "[У мінулую] dddd [ў] LT"; case 1: case 2: case 4: return "[У мінулы] dddd [ў] LT" } }, sameElse: "L" }, relativeTime: { future: "праз %s", past: "%s таму", s: "некалькі секунд", m: n, mm: n, h: n, hh: n, d: "дзень", dd: n, M: "месяц", MM: n, y: "год", yy: n }, meridiemParse: /ночы|раніцы|дня|вечара/, isPM: function (e) { return /^(дня|вечара)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "ночы" } else if (e < 12) { return "раніцы" } else if (e < 17) { return "дня" } else { return "вечара" } }, ordinalParse: /\d{1,2}-(і|ы|га)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": case "w": case "W": return (e % 10 === 2 || e % 10 === 3) && e % 100 !== 12 && e % 100 !== 13 ? e + "-і" : e + "-ы"; case "D": return e + "-га"; default: return e } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("bg", { months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"), monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"), weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"), weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Днес в] LT", nextDay: "[Утре в] LT", nextWeek: "dddd [в] LT", lastDay: "[Вчера в] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[В изминалата] dddd [в] LT"; case 1: case 2: case 4: case 5: return "[В изминалия] dddd [в] LT" } }, sameElse: "L" }, relativeTime: { future: "след %s", past: "преди %s", s: "няколко секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дни", M: "месец", MM: "%d месеца", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (e) { var t = e % 10, n = e % 100; if (e === 0) { return e + "-ев" } else if (n === 0) { return e + "-ен" } else if (n > 10 && n < 20) { return e + "-ти" } else if (t === 1) { return e + "-ви" } else if (t === 2) { return e + "-ри" } else if (t === 7 || t === 8) { return e + "-ми" } else { return e + "-ти" } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "১", 2: "২", 3: "৩", 4: "৪", 5: "৫", 6: "৬", 7: "৭", 8: "৮", 9: "৯", 0: "০" }, n = { "১": "1", "২": "2", "৩": "3", "৪": "4", "৫": "5", "৬": "6", "৭": "7", "৮": "8", "৯": "9", "০": "0" }; return e.defineLocale("bn", { months: "জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"), monthsShort: "জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"), weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার".split("_"), weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি".split("_"), weekdaysMin: "রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"), longDateFormat: { LT: "A h:mm সময়", LTS: "A h:mm:ss সময়", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[আজ] LT", nextDay: "[আগামীকাল] LT", nextWeek: "dddd, LT", lastDay: "[গতকাল] LT", lastWeek: "[গত] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s পরে", past: "%s আগে", s: "কএক সেকেন্ড", m: "এক মিনিট", mm: "%d মিনিট", h: "এক ঘন্টা", hh: "%d ঘন্টা", d: "এক দিন", dd: "%d দিন", M: "এক মাস", MM: "%d মাস", y: "এক বছর", yy: "%d বছর" }, preparse: function (e) { return e.replace(/[১২৩৪৫৬৭৮৯০]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /রাত|শকাল|দুপুর|বিকেল|রাত/, isPM: function (e) { return /^(দুপুর|বিকেল|রাত)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "রাত" } else if (e < 10) { return "শকাল" } else if (e < 17) { return "দুপুর" } else if (e < 20) { return "বিকেল" } else { return "রাত" } }, week: { dow: 0, doy: 6 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "༡", 2: "༢", 3: "༣", 4: "༤", 5: "༥", 6: "༦", 7: "༧", 8: "༨", 9: "༩", 0: "༠" }, n = { "༡": "1", "༢": "2", "༣": "3", "༤": "4", "༥": "5", "༦": "6", "༧": "7", "༨": "8", "༩": "9", "༠": "0" }; return e.defineLocale("bo", { months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"), weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), longDateFormat: { LT: "A h:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[དི་རིང] LT", nextDay: "[སང་ཉིན] LT", nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT", lastDay: "[ཁ་སང] LT", lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ལ་", past: "%s སྔན་ལ", s: "ལམ་སང", m: "སྐར་མ་གཅིག", mm: "%d སྐར་མ", h: "ཆུ་ཚོད་གཅིག", hh: "%d ཆུ་ཚོད", d: "ཉིན་གཅིག", dd: "%d ཉིན་", M: "ཟླ་བ་གཅིག", MM: "%d ཟླ་བ", y: "ལོ་གཅིག", yy: "%d ལོ" }, preparse: function (e) { return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/, isPM: function (e) { return /^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "མཚན་མོ" } else if (e < 10) { return "ཞོགས་ཀས" } else if (e < 17) { return "ཉིན་གུང" } else if (e < 20) { return "དགོང་དག" } else { return "མཚན་མོ" } }, week: { dow: 0, doy: 6 } }) }); (function (e) { e(t) })(function (t) { function n(e, t, n) { var r = { mm: "munutenn", MM: "miz", dd: "devezh" }; return e + " " + s(r[n], e) } function r(e) { switch (i(e)) { case 1: case 3: case 4: case 5: case 9: return e + " bloaz"; default: return e + " vloaz" } } function i(e) { if (e > 9) { return i(e % 10) } return e } function s(e, t) { if (t === 2) { return o(e) } return e } function o(t) { var n = { m: "v", b: "v", d: "z" }; if (n[t.charAt(0)] === e) { return t } return n[t.charAt(0)] + t.substring(1) } return t.defineLocale("br", { months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"), monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"), weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"), weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"), weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"), longDateFormat: { LT: "h[e]mm A", LTS: "h[e]mm:ss A", L: "DD/MM/YYYY", LL: "D [a viz] MMMM YYYY", LLL: "D [a viz] MMMM YYYY LT", LLLL: "dddd, D [a viz] MMMM YYYY LT" }, calendar: { sameDay: "[Hiziv da] LT", nextDay: "[Warc'hoazh da] LT", nextWeek: "dddd [da] LT", lastDay: "[Dec'h da] LT", lastWeek: "dddd [paset da] LT", sameElse: "L" }, relativeTime: { future: "a-benn %s", past: "%s 'zo", s: "un nebeud segondennoù", m: "ur vunutenn", mm: n, h: "un eur", hh: "%d eur", d: "un devezh", dd: n, M: "ur miz", MM: n, y: "ur bloaz", yy: r }, ordinalParse: /\d{1,2}(añ|vet)/, ordinal: function (e) { var t = e === 1 ? "añ" : "vet"; return e + t }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n) { var r = e + " "; switch (n) { case "m": return t ? "jedna minuta" : "jedne minute"; case "mm": if (e === 1) { r += "minuta" } else if (e === 2 || e === 3 || e === 4) { r += "minute" } else { r += "minuta" } return r; case "h": return t ? "jedan sat" : "jednog sata"; case "hh": if (e === 1) { r += "sat" } else if (e === 2 || e === 3 || e === 4) { r += "sata" } else { r += "sati" } return r; case "dd": if (e === 1) { r += "dan" } else { r += "dana" } return r; case "MM": if (e === 1) { r += "mjesec" } else if (e === 2 || e === 3 || e === 4) { r += "mjeseca" } else { r += "mjeseci" } return r; case "yy": if (e === 1) { r += "godina" } else if (e === 2 || e === 3 || e === 4) { r += "godine" } else { r += "godina" } return r } } return e.defineLocale("bs", { months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"), weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[jučer u] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: return "[prošlu] dddd [u] LT"; case 6: return "[prošle] [subote] [u] LT"; case 1: case 2: case 4: case 5: return "[prošli] dddd [u] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", m: t, mm: t, h: t, hh: t, d: "dan", dd: t, M: "mjesec", MM: t, y: "godinu", yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ca", { months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"), weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: function () { return "[avui a " + (this.hours() !== 1 ? "les" : "la") + "] LT" }, nextDay: function () { return "[demà a " + (this.hours() !== 1 ? "les" : "la") + "] LT" }, nextWeek: function () { return "dddd [a " + (this.hours() !== 1 ? "les" : "la") + "] LT" }, lastDay: function () { return "[ahir a " + (this.hours() !== 1 ? "les" : "la") + "] LT" }, lastWeek: function () { return "[el] dddd [passat a " + (this.hours() !== 1 ? "les" : "la") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "fa %s", s: "uns segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, ordinalParse: /\d{1,2}(r|n|t|è|a)/, ordinal: function (e, t) { var n = e === 1 ? "r" : e === 2 ? "n" : e === 3 ? "r" : e === 4 ? "t" : "è"; if (t === "w" || t === "W") { n = "a" } return e + n }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function r(e) { return e > 1 && e < 5 && ~~(e / 10) !== 1 } function i(e, t, n, i) { var s = e + " "; switch (n) { case "s": return t || i ? "pár sekund" : "pár sekundami"; case "m": return t ? "minuta" : i ? "minutu" : "minutou"; case "mm": if (t || i) { return s + (r(e) ? "minuty" : "minut") } else { return s + "minutami" } break; case "h": return t ? "hodina" : i ? "hodinu" : "hodinou"; case "hh": if (t || i) { return s + (r(e) ? "hodiny" : "hodin") } else { return s + "hodinami" } break; case "d": return t || i ? "den" : "dnem"; case "dd": if (t || i) { return s + (r(e) ? "dny" : "dní") } else { return s + "dny" } break; case "M": return t || i ? "měsíc" : "měsícem"; case "MM": if (t || i) { return s + (r(e) ? "měsíce" : "měsíců") } else { return s + "měsíci" } break; case "y": return t || i ? "rok" : "rokem"; case "yy": if (t || i) { return s + (r(e) ? "roky" : "let") } else { return s + "lety" } break } } var t = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), n = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"); return e.defineLocale("cs", { months: t, monthsShort: n, monthsParse: function (e, t) { var n, r = []; for (n = 0; n < 12; n++) { r[n] = new RegExp("^" + e[n] + "$|^" + t[n] + "$", "i") } return r }(t, n), weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"), weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"), weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd D. MMMM YYYY LT" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[zítra v] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v neděli v] LT"; case 1: case 2: return "[v] dddd [v] LT"; case 3: return "[ve středu v] LT"; case 4: return "[ve čtvrtek v] LT"; case 5: return "[v pátek v] LT"; case 6: return "[v sobotu v] LT" } }, lastDay: "[včera v] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulou neděli v] LT"; case 1: case 2: return "[minulé] dddd [v] LT"; case 3: return "[minulou středu v] LT"; case 4: case 5: return "[minulý] dddd [v] LT"; case 6: return "[minulou sobotu v] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "před %s", s: i, m: i, mm: i, h: i, hh: i, d: i, dd: i, M: i, MM: i, y: i, yy: i }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("cv", { months: "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"), monthsShort: "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"), weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"), weekdaysShort: "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"), weekdaysMin: "вр_тн_ыт_юн_кç_эр_шм".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD-MM-YYYY", LL: "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]", LLL: "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT", LLLL: "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT" }, calendar: { sameDay: "[Паян] LT [сехетре]", nextDay: "[Ыран] LT [сехетре]", lastDay: "[Ĕнер] LT [сехетре]", nextWeek: "[Çитес] dddd LT [сехетре]", lastWeek: "[Иртнĕ] dddd LT [сехетре]", sameElse: "L" }, relativeTime: { future: function (e) { var t = /сехет$/i.exec(e) ? "рен" : /çул$/i.exec(e) ? "тан" : "ран"; return e + t }, past: "%s каялла", s: "пĕр-ик çеккунт", m: "пĕр минут", mm: "%d минут", h: "пĕр сехет", hh: "%d сехет", d: "пĕр кун", dd: "%d кун", M: "пĕр уйăх", MM: "%d уйăх", y: "пĕр çул", yy: "%d çул" }, ordinalParse: /\d{1,2}-мĕш/, ordinal: "%d-мĕш", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("cy", { months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"), monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"), weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"), weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"), weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Heddiw am] LT", nextDay: "[Yfory am] LT", nextWeek: "dddd [am] LT", lastDay: "[Ddoe am] LT", lastWeek: "dddd [diwethaf am] LT", sameElse: "L" }, relativeTime: { future: "mewn %s", past: "%s yn ôl", s: "ychydig eiliadau", m: "munud", mm: "%d munud", h: "awr", hh: "%d awr", d: "diwrnod", dd: "%d diwrnod", M: "mis", MM: "%d mis", y: "blwyddyn", yy: "%d flynedd" }, ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/, ordinal: function (e) { var t = e, n = "", r = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"]; if (t > 20) { if (t === 40 || t === 50 || t === 60 || t === 80 || t === 100) { n = "fed" } else { n = "ain" } } else if (t > 0) { n = r[t] } return e + n }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd [d.] D. MMMM YYYY LT" }, calendar: { sameDay: "[I dag kl.] LT", nextDay: "[I morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[I går kl.] LT", lastWeek: "[sidste] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "få sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en måned", MM: "%d måneder", y: "et år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n, r) { var i = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] }; return t ? i[n][0] : i[n][1] } return e.defineLocale("de-at", { months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[Heute um] LT [Uhr]", sameElse: "L", nextDay: "[Morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[Gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: t, mm: "%d Minuten", h: t, hh: "%d Stunden", d: t, dd: t, M: t, MM: t, y: t, yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n, r) { var i = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] }; return t ? i[n][0] : i[n][1] } return e.defineLocale("de", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[Heute um] LT [Uhr]", sameElse: "L", nextDay: "[Morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[Gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: t, mm: "%d Minuten", h: t, hh: "%d Stunden", d: t, dd: t, M: t, MM: t, y: t, yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("el", { monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"), monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"), months: function (e, t) { if (/D/.test(t.substring(0, t.indexOf("MMMM")))) { return this._monthsGenitiveEl[e.month()] } else { return this._monthsNominativeEl[e.month()] } }, monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"), weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"), weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"), weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"), meridiem: function (e, t, n) { if (e > 11) { return n ? "μμ" : "ΜΜ" } else { return n ? "πμ" : "ΠΜ" } }, isPM: function (e) { return (e + "").toLowerCase()[0] === "μ" }, meridiemParse: /[ΠΜ]\.?Μ?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendarEl: { sameDay: "[Σήμερα {}] LT", nextDay: "[Αύριο {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[Χθες {}] LT", lastWeek: function () { switch (this.day()) { case 6: return "[το προηγούμενο] dddd [{}] LT"; default: return "[την προηγούμενη] dddd [{}] LT" } }, sameElse: "L" }, calendar: function (e, t) { var n = this._calendarEl[e], r = t && t.hours(); if (typeof n === "function") { n = n.apply(t) } return n.replace("{}", r % 12 === 1 ? "στη" : "στις") }, relativeTime: { future: "σε %s", past: "%s πριν", s: "λίγα δευτερόλεπτα", m: "ένα λεπτό", mm: "%d λεπτά", h: "μία ώρα", hh: "%d ώρες", d: "μία μέρα", dd: "%d μέρες", M: "ένας μήνας", MM: "%d μήνες", y: "ένας χρόνος", yy: "%d χρόνια" }, ordinalParse: /\d{1,2}η/, ordinal: "%dη", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, n = ~~(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th"; return e + n }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "D MMMM, YYYY", LLL: "D MMMM, YYYY LT", LLLL: "dddd, D MMMM, YYYY LT" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, n = ~~(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th"; return e + n } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, n = ~~(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th"; return e + n }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("eo", { months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"), weekdays: "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"), weekdaysShort: "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "YYYY-MM-DD", LL: "D[-an de] MMMM, YYYY", LLL: "D[-an de] MMMM, YYYY LT", LLLL: "dddd, [la] D[-an de] MMMM, YYYY LT" }, meridiemParse: /[ap]\.t\.m/i, isPM: function (e) { return e.charAt(0).toLowerCase() === "p" }, meridiem: function (e, t, n) { if (e > 11) { return n ? "p.t.m." : "P.T.M." } else { return n ? "a.t.m." : "A.T.M." } }, calendar: { sameDay: "[Hodiaŭ je] LT", nextDay: "[Morgaŭ je] LT", nextWeek: "dddd [je] LT", lastDay: "[Hieraŭ je] LT", lastWeek: "[pasinta] dddd [je] LT", sameElse: "L" }, relativeTime: { future: "je %s", past: "antaŭ %s", s: "sekundoj", m: "minuto", mm: "%d minutoj", h: "horo", hh: "%d horoj", d: "tago", dd: "%d tagoj", M: "monato", MM: "%d monatoj", y: "jaro", yy: "%d jaroj" }, ordinalParse: /\d{1,2}a/, ordinal: "%da", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"); return e.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (e, r) { if (/-MMM-/.test(r)) { return n[e.month()] } else { return t[e.month()] } }, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY LT", LLLL: "dddd, D [de] MMMM [de] YYYY LT" }, calendar: { sameDay: function () { return "[hoy a la" + (this.hours() !== 1 ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (this.hours() !== 1 ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (this.hours() !== 1 ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (this.hours() !== 1 ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (this.hours() !== 1 ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n, r) { var i = { s: ["mõne sekundi", "mõni sekund", "paar sekundit"], m: ["ühe minuti", "üks minut"], mm: [e + " minuti", e + " minutit"], h: ["ühe tunni", "tund aega", "üks tund"], hh: [e + " tunni", e + " tundi"], d: ["ühe päeva", "üks päev"], M: ["kuu aja", "kuu aega", "üks kuu"], MM: [e + " kuu", e + " kuud"], y: ["ühe aasta", "aasta", "üks aasta"], yy: [e + " aasta", e + " aastat"] }; if (t) { return i[n][2] ? i[n][2] : i[n][1] } return r ? i[n][0] : i[n][1] } return e.defineLocale("et", { months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"), monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"), weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"), weekdaysShort: "P_E_T_K_N_R_L".split("_"), weekdaysMin: "P_E_T_K_N_R_L".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[Täna,] LT", nextDay: "[Homme,] LT", nextWeek: "[Järgmine] dddd LT", lastDay: "[Eile,] LT", lastWeek: "[Eelmine] dddd LT", sameElse: "L" }, relativeTime: { future: "%s pärast", past: "%s tagasi", s: t, m: t, mm: t, h: t, hh: t, d: t, dd: "%d päeva", M: t, MM: t, y: t, yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] LT", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] LT", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] LT", llll: "ddd, YYYY[ko] MMM D[a] LT" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "۱", 2: "۲", 3: "۳", 4: "۴", 5: "۵", 6: "۶", 7: "۷", 8: "۸", 9: "۹", 0: "۰" }, n = { "۱": "1", "۲": "2", "۳": "3", "۴": "4", "۵": "5", "۶": "6", "۷": "7", "۸": "8", "۹": "9", "۰": "0" }; return e.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, meridiemParse: /قبل از ظهر|بعد از ظهر/, isPM: function (e) { return /بعد از ظهر/.test(e) }, meridiem: function (e, t, n) { if (e < 12) { return "قبل از ظهر" } else { return "بعد از ظهر" } }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [پیش] [ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چندین ثانیه", m: "یک دقیقه", mm: "%d دقیقه", h: "یک ساعت", hh: "%d ساعت", d: "یک روز", dd: "%d روز", M: "یک ماه", MM: "%d ماه", y: "یک سال", yy: "%d سال" }, preparse: function (e) { return e.replace(/[۰-۹]/g, function (e) { return n[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, ordinalParse: /\d{1,2}م/, ordinal: "%dم", week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { function r(e, t, n, r) { var s = ""; switch (n) { case "s": return r ? "muutaman sekunnin" : "muutama sekunti"; case "m": return r ? "minuutin" : "minuutti"; case "mm": s = r ? "minuutin" : "minuuttia"; break; case "h": return r ? "tunnin" : "tunti"; case "hh": s = r ? "tunnin" : "tuntia"; break; case "d": return r ? "päivän" : "päivä"; case "dd": s = r ? "päivän" : "päivää"; break; case "M": return r ? "kuukauden" : "kuukausi"; case "MM": s = r ? "kuukauden" : "kuukautta"; break; case "y": return r ? "vuoden" : "vuosi"; case "yy": s = r ? "vuoden" : "vuotta"; break } s = i(e, r) + " " + s; return s } function i(e, r) { return e < 10 ? r ? n[e] : t[e] : e } var t = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "), n = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", t[7], t[8], t[9]]; return e.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] LT", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] LT", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] LT", llll: "ddd, Do MMM YYYY, [klo] LT" }, calendar: { sameDay: "[tänään] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s päästä", past: "%s sitten", s: r, m: r, mm: r, h: r, hh: r, d: r, dd: r, M: r, MM: r, y: r, yy: r }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("fo", { months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"), weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"), weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D. MMMM, YYYY LT" }, calendar: { sameDay: "[Í dag kl.] LT", nextDay: "[Í morgin kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[Í gjár kl.] LT", lastWeek: "[síðstu] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "um %s", past: "%s síðani", s: "fá sekund", m: "ein minutt", mm: "%d minuttir", h: "ein tími", hh: "%d tímar", d: "ein dagur", dd: "%d dagar", M: "ein mánaði", MM: "%d mánaðir", y: "eitt ár", yy: "%d ár" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("fr-ca", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|)/, ordinal: function (e) { return e + (e === 1 ? "er" : "") } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("fr", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|)/, ordinal: function (e) { return e + (e === 1 ? "er" : "") }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"), n = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"); return e.defineLocale("fy", { months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"), monthsShort: function (e, r) { if (/-MMM-/.test(r)) { return n[e.month()] } else { return t[e.month()] } }, weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"), weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"), weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[hjoed om] LT", nextDay: "[moarn om] LT", nextWeek: "dddd [om] LT", lastDay: "[juster om] LT", lastWeek: "[ôfrûne] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oer %s", past: "%s lyn", s: "in pear sekonden", m: "ien minút", mm: "%d minuten", h: "ien oere", hh: "%d oeren", d: "ien dei", dd: "%d dagen", M: "ien moanne", MM: "%d moannen", y: "ien jier", yy: "%d jierren" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (e === 1 || e === 8 || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("gl", { months: "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"), monthsShort: "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"), weekdays: "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"), weekdaysShort: "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"), weekdaysMin: "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: function () { return "[hoxe " + (this.hours() !== 1 ? "ás" : "á") + "] LT" }, nextDay: function () { return "[mañá " + (this.hours() !== 1 ? "ás" : "á") + "] LT" }, nextWeek: function () { return "dddd [" + (this.hours() !== 1 ? "ás" : "a") + "] LT" }, lastDay: function () { return "[onte " + (this.hours() !== 1 ? "á" : "a") + "] LT" }, lastWeek: function () { return "[o] dddd [pasado " + (this.hours() !== 1 ? "ás" : "a") + "] LT" }, sameElse: "L" }, relativeTime: { future: function (e) { if (e === "uns segundos") { return "nuns segundos" } return "en " + e }, past: "hai %s", s: "uns segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("he", { months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"), monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"), weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"), weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"), weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D [ב]MMMM YYYY", LLL: "D [ב]MMMM YYYY LT", LLLL: "dddd, D [ב]MMMM YYYY LT", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY LT", llll: "ddd, D MMM YYYY LT" }, calendar: { sameDay: "[היום ב־]LT", nextDay: "[מחר ב־]LT", nextWeek: "dddd [בשעה] LT", lastDay: "[אתמול ב־]LT", lastWeek: "[ביום] dddd [האחרון בשעה] LT", sameElse: "L" }, relativeTime: { future: "בעוד %s", past: "לפני %s", s: "מספר שניות", m: "דקה", mm: "%d דקות", h: "שעה", hh: function (e) { if (e === 2) { return "שעתיים" } return e + " שעות" }, d: "יום", dd: function (e) { if (e === 2) { return "יומיים" } return e + " ימים" }, M: "חודש", MM: function (e) { if (e === 2) { return "חודשיים" } return e + " חודשים" }, y: "שנה", yy: function (e) { if (e === 2) { return "שנתיים" } else if (e % 10 === 0 && e !== 10) { return e + " שנה" } return e + " שנים" } } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, n = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; return e.defineLocale("hi", { months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[आज] LT", nextDay: "[कल] LT", nextWeek: "dddd, LT", lastDay: "[कल] LT", lastWeek: "[पिछले] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /रात|सुबह|दोपहर|शाम/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "रात") { return e < 4 ? e : e + 12 } else if (t === "सुबह") { return e } else if (t === "दोपहर") { return e >= 10 ? e : e + 12 } else if (t === "शाम") { return e + 12 } }, meridiem: function (e, t, n) { if (e < 4) { return "रात" } else if (e < 10) { return "सुबह" } else if (e < 17) { return "दोपहर" } else if (e < 20) { return "शाम" } else { return "रात" } }, week: { dow: 0, doy: 6 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n) { var r = e + " "; switch (n) { case "m": return t ? "jedna minuta" : "jedne minute"; case "mm": if (e === 1) { r += "minuta" } else if (e === 2 || e === 3 || e === 4) { r += "minute" } else { r += "minuta" } return r; case "h": return t ? "jedan sat" : "jednog sata"; case "hh": if (e === 1) { r += "sat" } else if (e === 2 || e === 3 || e === 4) { r += "sata" } else { r += "sati" } return r; case "dd": if (e === 1) { r += "dan" } else { r += "dana" } return r; case "MM": if (e === 1) { r += "mjesec" } else if (e === 2 || e === 3 || e === 4) { r += "mjeseca" } else { r += "mjeseci" } return r; case "yy": if (e === 1) { r += "godina" } else if (e === 2 || e === 3 || e === 4) { r += "godine" } else { r += "godina" } return r } } return e.defineLocale("hr", { months: "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"), monthsShort: "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[jučer u] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: return "[prošlu] dddd [u] LT"; case 6: return "[prošle] [subote] [u] LT"; case 1: case 2: case 4: case 5: return "[prošli] dddd [u] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", m: t, mm: t, h: t, hh: t, d: "dan", dd: t, M: "mjesec", MM: t, y: "godinu", yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function n(e, t, n, r) { var i = e, s; switch (n) { case "s": return r || t ? "néhány másodperc" : "néhány másodperce"; case "m": return "egy" + (r || t ? " perc" : " perce"); case "mm": return i + (r || t ? " perc" : " perce"); case "h": return "egy" + (r || t ? " óra" : " órája"); case "hh": return i + (r || t ? " óra" : " órája"); case "d": return "egy" + (r || t ? " nap" : " napja"); case "dd": return i + (r || t ? " nap" : " napja"); case "M": return "egy" + (r || t ? " hónap" : " hónapja"); case "MM": return i + (r || t ? " hónap" : " hónapja"); case "y": return "egy" + (r || t ? " év" : " éve"); case "yy": return i + (r || t ? " év" : " éve") } return "" } function r(e) { return (e ? "" : "[múlt] ") + "[" + t[this.day()] + "] LT[-kor]" } var t = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "); return e.defineLocale("hu", { months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"), monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"), weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"), weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D., LT", LLLL: "YYYY. MMMM D., dddd LT" }, meridiemParse: /de|du/i, isPM: function (e) { return e.charAt(1).toLowerCase() === "u" }, meridiem: function (e, t, n) { if (e < 12) { return n === true ? "de" : "DE" } else { return n === true ? "du" : "DU" } }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function () { return r.call(this, true) }, lastDay: "[tegnap] LT[-kor]", lastWeek: function () { return r.call(this, false) }, sameElse: "L" }, relativeTime: { future: "%s múlva", past: "%s", s: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function t(e, t) { var n = { nominative: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_"), accusative: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_") }, r = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function n(e, t) { var n = "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"); return n[e.month()] } function r(e, t) { var n = "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"); return n[e.day()] } return e.defineLocale("hy-am", { months: t, monthsShort: n, weekdays: r, weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY թ.", LLL: "D MMMM YYYY թ., LT", LLLL: "dddd, D MMMM YYYY թ., LT" }, calendar: { sameDay: "[այսօր] LT", nextDay: "[վաղը] LT", lastDay: "[երեկ] LT", nextWeek: function () { return "dddd [օրը ժամը] LT" }, lastWeek: function () { return "[անցած] dddd [օրը ժամը] LT" }, sameElse: "L" }, relativeTime: { future: "%s հետո", past: "%s առաջ", s: "մի քանի վայրկյան", m: "րոպե", mm: "%d րոպե", h: "ժամ", hh: "%d ժամ", d: "օր", dd: "%d օր", M: "ամիս", MM: "%d ամիս", y: "տարի", yy: "%d տարի" }, meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/, isPM: function (e) { return /^(ցերեկվա|երեկոյան)$/.test(e) }, meridiem: function (e) { if (e < 4) { return "գիշերվա" } else if (e < 12) { return "առավոտվա" } else if (e < 17) { return "ցերեկվա" } else { return "երեկոյան" } }, ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/, ordinal: function (e, t) { switch (t) { case "DDD": case "w": case "W": case "DDDo": if (e === 1) { return e + "-ին" } return e + "-րդ"; default: return e } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "LT.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] LT", LLLL: "dddd, D MMMM YYYY [pukul] LT" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "pagi") { return e } else if (t === "siang") { return e >= 11 ? e : e + 12 } else if (t === "sore" || t === "malam") { return e + 12 } }, meridiem: function (e, t, n) { if (e < 11) { return "pagi" } else if (e < 15) { return "siang" } else if (e < 19) { return "sore" } else { return "malam" } }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function t(e) { if (e % 100 === 11) { return true } else if (e % 10 === 1) { return false } return true } function n(e, n, r, i) { var s = e + " "; switch (r) { case "s": return n || i ? "nokkrar sekúndur" : "nokkrum sekúndum"; case "m": return n ? "mínúta" : "mínútu"; case "mm": if (t(e)) { return s + (n || i ? "mínútur" : "mínútum") } else if (n) { return s + "mínúta" } return s + "mínútu"; case "hh": if (t(e)) { return s + (n || i ? "klukkustundir" : "klukkustundum") } return s + "klukkustund"; case "d": if (n) { return "dagur" } return i ? "dag" : "degi"; case "dd": if (t(e)) { if (n) { return s + "dagar" } return s + (i ? "daga" : "dögum") } else if (n) { return s + "dagur" } return s + (i ? "dag" : "degi"); case "M": if (n) { return "mánuður" } return i ? "mánuð" : "mánuði"; case "MM": if (t(e)) { if (n) { return s + "mánuðir" } return s + (i ? "mánuði" : "mánuðum") } else if (n) { return s + "mánuður" } return s + (i ? "mánuð" : "mánuði"); case "y": return n || i ? "ár" : "ári"; case "yy": if (t(e)) { return s + (n || i ? "ár" : "árum") } return s + (n || i ? "ár" : "ári") } } return e.defineLocale("is", { months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"), monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"), weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"), weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"), weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] LT", LLLL: "dddd, D. MMMM YYYY [kl.] LT" }, calendar: { sameDay: "[í dag kl.] LT", nextDay: "[á morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[í gær kl.] LT", lastWeek: "[síðasta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s síðan", s: n, m: n, mm: n, h: "klukkustund", hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"), weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"), weekdaysMin: "D_L_Ma_Me_G_V_S".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function () { switch (this.day()) { case 0: return "[la scorsa] dddd [alle] LT"; default: return "[lo scorso] dddd [alle] LT" } }, sameElse: "L" }, relativeTime: { future: function (e) { return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e }, past: "%s fa", s: "alcuni secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ja", { months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), longDateFormat: { LT: "Ah時m分", LTS: "LTs秒", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日LT", LLLL: "YYYY年M月D日LT dddd" }, meridiemParse: /午前|午後/i, isPM: function (e) { return e === "午後" }, meridiem: function (e, t, n) { if (e < 12) { return "午前" } else { return "午後" } }, calendar: { sameDay: "[今日] LT", nextDay: "[明日] LT", nextWeek: "[来週]dddd LT", lastDay: "[昨日] LT", lastWeek: "[前週]dddd LT", sameElse: "L" }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } }) }); (function (e) { e(t) })(function (e) { function t(e, t) { var n = { nominative: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"), accusative: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_") }, r = /D[oD] *MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function n(e, t) { var n = { nominative: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"), accusative: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_") }, r = /(წინა|შემდეგ)/.test(t) ? "accusative" : "nominative"; return n[r][e.day()] } return e.defineLocale("ka", { months: t, monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"), weekdays: n, weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"), weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[დღეს] LT[-ზე]", nextDay: "[ხვალ] LT[-ზე]", lastDay: "[გუშინ] LT[-ზე]", nextWeek: "[შემდეგ] dddd LT[-ზე]", lastWeek: "[წინა] dddd LT-ზე", sameElse: "L" }, relativeTime: { future: function (e) { return /(წამი|წუთი|საათი|წელი)/.test(e) ? e.replace(/ი$/, "ში") : e + "ში" }, past: function (e) { if (/(წამი|წუთი|საათი|დღე|თვე)/.test(e)) { return e.replace(/(ი|ე)$/, "ის წინ") } if (/წელი/.test(e)) { return e.replace(/წელი$/, "წლის წინ") } }, s: "რამდენიმე წამი", m: "წუთი", mm: "%d წუთი", h: "საათი", hh: "%d საათი", d: "დღე", dd: "%d დღე", M: "თვე", MM: "%d თვე", y: "წელი", yy: "%d წელი" }, ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/, ordinal: function (e) { if (e === 0) { return e } if (e === 1) { return e + "-ლი" } if (e < 20 || e <= 100 && e % 20 === 0 || e % 100 === 0) { return "მე-" + e } return e + "-ე" }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("km", { months: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), monthsShort: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[ថ្ងៃនៈ ម៉ោង] LT", nextDay: "[ស្អែក ម៉ោង] LT", nextWeek: "dddd [ម៉ោង] LT", lastDay: "[ម្សិលមិញ ម៉ោង] LT", lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT", sameElse: "L" }, relativeTime: { future: "%sទៀត", past: "%sមុន", s: "ប៉ុន្មានវិនាទី", m: "មួយនាទី", mm: "%d នាទី", h: "មួយម៉ោង", hh: "%d ម៉ោង", d: "មួយថ្ងៃ", dd: "%d ថ្ងៃ", M: "មួយខែ", MM: "%d ខែ", y: "មួយឆ្នាំ", yy: "%d ឆ្នាំ" }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ko", { months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), longDateFormat: { LT: "A h시 m분", LTS: "A h시 m분 s초", L: "YYYY.MM.DD", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 LT", LLLL: "YYYY년 MMMM D일 dddd LT" }, calendar: { sameDay: "오늘 LT", nextDay: "내일 LT", nextWeek: "dddd LT", lastDay: "어제 LT", lastWeek: "지난주 dddd LT", sameElse: "L" }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇초", ss: "%d초", m: "일분", mm: "%d분", h: "한시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한달", MM: "%d달", y: "일년", yy: "%d년" }, ordinalParse: /\d{1,2}일/, ordinal: "%d일", meridiemParse: /오전|오후/, isPM: function (e) { return e === "오후" }, meridiem: function (e, t, n) { return e < 12 ? "오전" : "오후" } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n, r) { var i = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] }; return t ? i[n][0] : i[n][1] } function n(e) { var t = e.substr(0, e.indexOf(" ")); if (i(t)) { return "a " + e } return "an " + e } function r(e) { var t = e.substr(0, e.indexOf(" ")); if (i(t)) { return "viru " + e } return "virun " + e } function i(e) { e = parseInt(e, 10); if (isNaN(e)) { return false } if (e < 0) { return true } else if (e < 10) { if (4 <= e && e <= 7) { return true } return false } else if (e < 100) { var t = e % 10, n = e / 10; if (t === 0) { return i(n) } return i(t) } else if (e < 1e4) { while (e >= 10) { e = e / 10 } return i(e) } else { e = e / 1e3; return i(e) } } return e.defineLocale("lb", { months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"), longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[Gëschter um] LT", lastWeek: function () { switch (this.day()) { case 2: case 4: return "[Leschten] dddd [um] LT"; default: return "[Leschte] dddd [um] LT" } } }, relativeTime: { future: n, past: r, s: "e puer Sekonnen", m: t, mm: "%d Minutten", h: t, hh: "%d Stonnen", d: t, dd: "%d Deeg", M: t, MM: "%d Méint", y: t, yy: "%d Joer" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function r(e, t, n, r) { if (t) { return "kelios sekundės" } else { return r ? "kelių sekundžių" : "kelias sekundes" } } function i(e, t, n, r) { return t ? o(n)[0] : r ? o(n)[1] : o(n)[2] } function s(e) { return e % 10 === 0 || e > 10 && e < 20 } function o(e) { return t[e].split("_") } function u(e, t, n, r) { var u = e + " "; if (e === 1) { return u + i(e, t, n[0], r) } else if (t) { return u + (s(e) ? o(n)[1] : o(n)[0]) } else { if (r) { return u + o(n)[1] } else { return u + (s(e) ? o(n)[1] : o(n)[2]) } } } function a(e, t) { var r = t.indexOf("dddd HH:mm") === -1, i = n[e.day()]; return r ? i : i.substring(0, i.length - 2) + "į" } var t = { m: "minutė_minutės_minutę", mm: "minutės_minučių_minutes", h: "valanda_valandos_valandą", hh: "valandos_valandų_valandas", d: "diena_dienos_dieną", dd: "dienos_dienų_dienas", M: "mėnuo_mėnesio_mėnesį", MM: "mėnesiai_mėnesių_mėnesius", y: "metai_metų_metus", yy: "metai_metų_metus" }, n = "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"); return e.defineLocale("lt", { months: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"), monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: a, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"), weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], LT [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, LT [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], LT [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, LT [val.]" }, calendar: { sameDay: "[Šiandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Praėjusį] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prieš %s", s: r, m: i, mm: u, h: i, hh: u, d: i, dd: u, M: i, MM: u, y: i, yy: u }, ordinalParse: /\d{1,2}-oji/, ordinal: function (e) { return e + "-oji" }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function n(e, t, n) { var r = e.split("_"); if (n) { return t % 10 === 1 && t !== 11 ? r[2] : r[3] } else { return t % 10 === 1 && t !== 11 ? r[0] : r[1] } } function r(e, r, i) { return e + " " + n(t[i], e, r) } var t = { mm: "minūti_minūtes_minūte_minūtes", hh: "stundu_stundas_stunda_stundas", dd: "dienu_dienas_diena_dienas", MM: "mēnesi_mēnešus_mēnesis_mēneši", yy: "gadu_gadus_gads_gadi" }; return e.defineLocale("lv", { months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"), weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, LT", LLLL: "YYYY. [gada] D. MMMM, dddd, LT" }, calendar: { sameDay: "[Šodien pulksten] LT", nextDay: "[Rīt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pagājušā] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "%s vēlāk", past: "%s agrāk", s: "dažas sekundes", m: "minūti", mm: r, h: "stundu", hh: r, d: "dienu", dd: r, M: "mēnesi", MM: r, y: "gadu", yy: r }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("mk", { months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"), monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"), weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"), weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"), weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Денес во] LT", nextDay: "[Утре во] LT", nextWeek: "dddd [во] LT", lastDay: "[Вчера во] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[Во изминатата] dddd [во] LT"; case 1: case 2: case 4: case 5: return "[Во изминатиот] dddd [во] LT" } }, sameElse: "L" }, relativeTime: { future: "после %s", past: "пред %s", s: "неколку секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дена", M: "месец", MM: "%d месеци", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (e) { var t = e % 10, n = e % 100; if (e === 0) { return e + "-ев" } else if (n === 0) { return e + "-ен" } else if (n > 10 && n < 20) { return e + "-ти" } else if (t === 1) { return e + "-ви" } else if (t === 2) { return e + "-ри" } else if (t === 7 || t === 8) { return e + "-ми" } else { return e + "-ти" } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ml", { months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"), monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"), weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"), weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"), weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"), longDateFormat: { LT: "A h:mm -നു", LTS: "A h:mm:ss -നു", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[ഇന്ന്] LT", nextDay: "[നാളെ] LT", nextWeek: "dddd, LT", lastDay: "[ഇന്നലെ] LT", lastWeek: "[കഴിഞ്ഞ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s കഴിഞ്ഞ്", past: "%s മുൻപ്", s: "അൽപ നിമിഷങ്ങൾ", m: "ഒരു മിനിറ്റ്", mm: "%d മിനിറ്റ്", h: "ഒരു മണിക്കൂർ", hh: "%d മണിക്കൂർ", d: "ഒരു ദിവസം", dd: "%d ദിവസം", M: "ഒരു മാസം", MM: "%d മാസം", y: "ഒരു വർഷം", yy: "%d വർഷം" }, meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i, isPM: function (e) { return /^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "രാത്രി" } else if (e < 12) { return "രാവിലെ" } else if (e < 17) { return "ഉച്ച കഴിഞ്ഞ്" } else if (e < 20) { return "വൈകുന്നേരം" } else { return "രാത്രി" } } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, n = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; return e.defineLocale("mr", { months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"), monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"), weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm वाजता", LTS: "A h:mm:ss वाजता", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[आज] LT", nextDay: "[उद्या] LT", nextWeek: "dddd, LT", lastDay: "[काल] LT", lastWeek: "[मागील] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s नंतर", past: "%s पूर्वी", s: "सेकंद", m: "एक मिनिट", mm: "%d मिनिटे", h: "एक तास", hh: "%d तास", d: "एक दिवस", dd: "%d दिवस", M: "एक महिना", MM: "%d महिने", y: "एक वर्ष", yy: "%d वर्षे" }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "रात्री") { return e < 4 ? e : e + 12 } else if (t === "सकाळी") { return e } else if (t === "दुपारी") { return e >= 10 ? e : e + 12 } else if (t === "सायंकाळी") { return e + 12 } }, meridiem: function (e, t, n) { if (e < 4) { return "रात्री" } else if (e < 10) { return "सकाळी" } else if (e < 17) { return "दुपारी" } else if (e < 20) { return "सायंकाळी" } else { return "रात्री" } }, week: { dow: 0, doy: 6 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "LT.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] LT", LLLL: "dddd, D MMMM YYYY [pukul] LT" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "pagi") { return e } else if (t === "tengahari") { return e >= 11 ? e : e + 12 } else if (t === "petang" || t === "malam") { return e + 12 } }, meridiem: function (e, t, n) { if (e < 11) { return "pagi" } else if (e < 15) { return "tengahari" } else if (e < 19) { return "petang" } else { return "malam" } }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "၁", 2: "၂", 3: "၃", 4: "၄", 5: "၅", 6: "၆", 7: "၇", 8: "၈", 9: "၉", 0: "၀" }, n = { "၁": "1", "၂": "2", "၃": "3", "၄": "4", "၅": "5", "၆": "6", "၇": "7", "၈": "8", "၉": "9", "၀": "0" }; return e.defineLocale("my", { months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"), monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"), weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"), weekdaysShort: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), weekdaysMin: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[ယနေ.] LT [မှာ]", nextDay: "[မနက်ဖြန်] LT [မှာ]", nextWeek: "dddd LT [မှာ]", lastDay: "[မနေ.က] LT [မှာ]", lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]", sameElse: "L" }, relativeTime: { future: "လာမည့် %s မှာ", past: "လွန်ခဲ့သော %s က", s: "စက္ကန်.အနည်းငယ်", m: "တစ်မိနစ်", mm: "%d မိနစ်", h: "တစ်နာရီ", hh: "%d နာရီ", d: "တစ်ရက်", dd: "%d ရက်", M: "တစ်လ", MM: "%d လ", y: "တစ်နှစ်", yy: "%d နှစ်" }, preparse: function (e) { return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tirs_ons_tors_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "H.mm", LTS: "LT.ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] LT", LLLL: "dddd D. MMMM YYYY [kl.] LT" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "for %s siden", s: "noen sekunder", m: "ett minutt", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dager", M: "en måned", MM: "%d måneder", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, n = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; return e.defineLocale("ne", { months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"), monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"), weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"), weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"), weekdaysMin: "आइ._सो._मङ्_बु._बि._शु._श.".split("_"), longDateFormat: { LT: "Aको h:mm बजे", LTS: "Aको h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return n[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /राती|बिहान|दिउँसो|बेलुका|साँझ|राती/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "राती") { return e < 3 ? e : e + 12 } else if (t === "बिहान") { return e } else if (t === "दिउँसो") { return e >= 10 ? e : e + 12 } else if (t === "बेलुका" || t === "साँझ") { return e + 12 } }, meridiem: function (e, t, n) { if (e < 3) { return "राती" } else if (e < 10) { return "बिहान" } else if (e < 15) { return "दिउँसो" } else if (e < 18) { return "बेलुका" } else if (e < 20) { return "साँझ" } else { return "राती" } }, calendar: { sameDay: "[आज] LT", nextDay: "[भोली] LT", nextWeek: "[आउँदो] dddd[,] LT", lastDay: "[हिजो] LT", lastWeek: "[गएको] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%sमा", past: "%s अगाडी", s: "केही समय", m: "एक मिनेट", mm: "%d मिनेट", h: "एक घण्टा", hh: "%d घण्टा", d: "एक दिन", dd: "%d दिन", M: "एक महिना", MM: "%d महिना", y: "एक बर्ष", yy: "%d बर्ष" }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"); return e.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function (e, r) { if (/-MMM-/.test(r)) { return n[e.month()] } else { return t[e.month()] } }, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (e === 1 || e === 8 || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"), weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I går klokka] LT", lastWeek: "[Føregåande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "for %s sidan", s: "nokre sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", M: "ein månad", MM: "%d månader", y: "eit år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function r(e) { return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 !== 1 } function i(e, t, n) { var i = e + " "; switch (n) { case "m": return t ? "minuta" : "minutę"; case "mm": return i + (r(e) ? "minuty" : "minut"); case "h": return t ? "godzina" : "godzinę"; case "hh": return i + (r(e) ? "godziny" : "godzin"); case "MM": return i + (r(e) ? "miesiące" : "miesięcy"); case "yy": return i + (r(e) ? "lata" : "lat") } } var t = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"), n = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"); return e.defineLocale("pl", { months: function (e, r) { if (/D MMMM/.test(r)) { return n[e.month()] } else { return t[e.month()] } }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"), weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"), weekdaysShort: "nie_pon_wt_śr_czw_pt_sb".split("_"), weekdaysMin: "N_Pn_Wt_Śr_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Dziś o] LT", nextDay: "[Jutro o] LT", nextWeek: "[W] dddd [o] LT", lastDay: "[Wczoraj o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[W zeszłą niedzielę o] LT"; case 3: return "[W zeszłą środę o] LT"; case 6: return "[W zeszłą sobotę o] LT"; default: return "[W zeszły] dddd [o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", m: i, mm: i, h: i, hh: i, d: "1 dzień", dd: "%d dni", M: "miesiąc", MM: i, y: "rok", yy: i }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("pt-br", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"), weekdaysMin: "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] LT", LLLL: "dddd, D [de] MMMM [de] YYYY [às] LT" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return this.day() === 0 || this.day() === 6 ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "%s atrás", s: "segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº" }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("pt", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"), weekdaysMin: "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY LT", LLLL: "dddd, D [de] MMMM [de] YYYY LT" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return this.day() === 0 || this.day() === 6 ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n) { var r = { mm: "minute", hh: "ore", dd: "zile", MM: "luni", yy: "ani" }, i = " "; if (e % 100 >= 20 || e >= 100 && e % 100 === 0) { i = " de " } return e + i + r[n] } return e.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[mâine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s în urmă", s: "câteva secunde", m: "un minut", mm: t, h: "o oră", hh: t, d: "o zi", dd: t, M: "o lună", MM: t, y: "un an", yy: t }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function t(e, t) { var n = e.split("_"); return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2] } function n(e, n, r) { var i = { mm: n ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }; if (r === "m") { return n ? "минута" : "минуту" } else { return e + " " + t(i[r], +e) } } function r(e, t) { var n = { nominative: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), accusative: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_") }, r = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function i(e, t) { var n = { nominative: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"), accusative: "янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_") }, r = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function s(e, t) { var n = { nominative: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), accusative: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_") }, r = /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(t) ? "accusative" : "nominative"; return n[r][e.day()] } return e.defineLocale("ru", { months: r, monthsShort: i, weekdays: s, weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), monthsParse: [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i], longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., LT", LLLL: "dddd, D MMMM YYYY г., LT" }, calendar: { sameDay: "[Сегодня в] LT", nextDay: "[Завтра в] LT", lastDay: "[Вчера в] LT", nextWeek: function () { return this.day() === 2 ? "[Во] dddd [в] LT" : "[В] dddd [в] LT" }, lastWeek: function (e) { if (e.week() !== this.week()) { switch (this.day()) { case 0: return "[В прошлое] dddd [в] LT"; case 1: case 2: case 4: return "[В прошлый] dddd [в] LT"; case 3: case 5: case 6: return "[В прошлую] dddd [в] LT" } } else { if (this.day() === 2) { return "[Во] dddd [в] LT" } else { return "[В] dddd [в] LT" } } }, sameElse: "L" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: n, mm: n, h: "час", hh: n, d: "день", dd: n, M: "месяц", MM: n, y: "год", yy: n }, meridiemParse: /ночи|утра|дня|вечера/i, isPM: function (e) { return /^(дня|вечера)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "ночи" } else if (e < 12) { return "утра" } else if (e < 17) { return "дня" } else { return "вечера" } }, ordinalParse: /\d{1,2}-(й|го|я)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": return e + "-й"; case "D": return e + "-го"; case "w": case "W": return e + "-я"; default: return e } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { function r(e) { return e > 1 && e < 5 } function i(e, t, n, i) { var s = e + " "; switch (n) { case "s": return t || i ? "pár sekúnd" : "pár sekundami"; case "m": return t ? "minúta" : i ? "minútu" : "minútou"; case "mm": if (t || i) { return s + (r(e) ? "minúty" : "minút") } else { return s + "minútami" } break; case "h": return t ? "hodina" : i ? "hodinu" : "hodinou"; case "hh": if (t || i) { return s + (r(e) ? "hodiny" : "hodín") } else { return s + "hodinami" } break; case "d": return t || i ? "deň" : "dňom"; case "dd": if (t || i) { return s + (r(e) ? "dni" : "dní") } else { return s + "dňami" } break; case "M": return t || i ? "mesiac" : "mesiacom"; case "MM": if (t || i) { return s + (r(e) ? "mesiace" : "mesiacov") } else { return s + "mesiacmi" } break; case "y": return t || i ? "rok" : "rokom"; case "yy": if (t || i) { return s + (r(e) ? "roky" : "rokov") } else { return s + "rokmi" } break } } var t = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), n = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"); return e.defineLocale("sk", { months: t, monthsShort: n, monthsParse: function (e, t) { var n, r = []; for (n = 0; n < 12; n++) { r[n] = new RegExp("^" + e[n] + "$|^" + t[n] + "$", "i") } return r }(t, n), weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd D. MMMM YYYY LT" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v nedeľu o] LT"; case 1: case 2: return "[v] dddd [o] LT"; case 3: return "[v stredu o] LT"; case 4: return "[vo štvrtok o] LT"; case 5: return "[v piatok o] LT"; case 6: return "[v sobotu o] LT" } }, lastDay: "[včera o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulú nedeľu o] LT"; case 1: case 2: return "[minulý] dddd [o] LT"; case 3: return "[minulú stredu o] LT"; case 4: case 5: return "[minulý] dddd [o] LT"; case 6: return "[minulú sobotu o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: i, m: i, mm: i, h: i, hh: i, d: i, dd: i, M: i, MM: i, y: i, yy: i }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { function t(e, t, n) { var r = e + " "; switch (n) { case "m": return t ? "ena minuta" : "eno minuto"; case "mm": if (e === 1) { r += "minuta" } else if (e === 2) { r += "minuti" } else if (e === 3 || e === 4) { r += "minute" } else { r += "minut" } return r; case "h": return t ? "ena ura" : "eno uro"; case "hh": if (e === 1) { r += "ura" } else if (e === 2) { r += "uri" } else if (e === 3 || e === 4) { r += "ure" } else { r += "ur" } return r; case "dd": if (e === 1) { r += "dan" } else { r += "dni" } return r; case "MM": if (e === 1) { r += "mesec" } else if (e === 2) { r += "meseca" } else if (e === 3 || e === 4) { r += "mesece" } else { r += "mesecev" } return r; case "yy": if (e === 1) { r += "leto" } else if (e === 2) { r += "leti" } else if (e === 3 || e === 4) { r += "leta" } else { r += "let" } return r } } return e.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v] [nedeljo] [ob] LT"; case 3: return "[v] [sredo] [ob] LT"; case 6: return "[v] [soboto] [ob] LT"; case 1: case 2: case 4: case 5: return "[v] dddd [ob] LT" } }, lastDay: "[včeraj ob] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[prejšnja] dddd [ob] LT"; case 1: case 2: case 4: case 5: return "[prejšnji] dddd [ob] LT" } }, sameElse: "L" }, relativeTime: { future: "čez %s", past: "%s nazaj", s: "nekaj sekund", m: t, mm: t, h: t, hh: t, d: "en dan", dd: t, M: "en mesec", MM: t, y: "eno leto", yy: t }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("sq", { months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"), monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"), weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"), weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"), weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"), meridiemParse: /PD|MD/, isPM: function (e) { return e.charAt(0) === "M" }, meridiem: function (e, t, n) { return e < 12 ? "PD" : "MD" }, longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[Sot në] LT", nextDay: "[Nesër në] LT", nextWeek: "dddd [në] LT", lastDay: "[Dje në] LT", lastWeek: "dddd [e kaluar në] LT", sameElse: "L" }, relativeTime: { future: "në %s", past: "%s më parë", s: "disa sekonda", m: "një minutë", mm: "%d minuta", h: "një orë", hh: "%d orë", d: "një ditë", dd: "%d ditë", M: "një muaj", MM: "%d muaj", y: "një vit", yy: "%d vite" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { var t = { words: { m: ["један минут", "једне минуте"], mm: ["минут", "минуте", "минута"], h: ["један сат", "једног сата"], hh: ["сат", "сата", "сати"], dd: ["дан", "дана", "дана"], MM: ["месец", "месеца", "месеци"], yy: ["година", "године", "година"] }, correctGrammaticalCase: function (e, t) { return e === 1 ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2] }, translate: function (e, n, r) { var i = t.words[r]; if (r.length === 1) { return n ? i[0] : i[1] } else { return e + " " + t.correctGrammaticalCase(e, i) } } }; return e.defineLocale("sr-cyrl", { months: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар"], monthsShort: ["јан.", "феб.", "мар.", "апр.", "мај", "јун", "јул", "авг.", "сеп.", "окт.", "нов.", "дец."], weekdays: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"], weekdaysShort: ["нед.", "пон.", "уто.", "сре.", "чет.", "пет.", "суб."], weekdaysMin: ["не", "по", "ут", "ср", "че", "пе", "су"], longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[данас у] LT", nextDay: "[сутра у] LT", nextWeek: function () { switch (this.day()) { case 0: return "[у] [недељу] [у] LT"; case 3: return "[у] [среду] [у] LT"; case 6: return "[у] [суботу] [у] LT"; case 1: case 2: case 4: case 5: return "[у] dddd [у] LT" } }, lastDay: "[јуче у] LT", lastWeek: function () { var e = ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"]; return e[this.day()] }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пре %s", s: "неколико секунди", m: t.translate, mm: t.translate, h: t.translate, hh: t.translate, d: "дан", dd: t.translate, M: "месец", MM: t.translate, y: "годину", yy: t.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { var t = { words: { m: ["jedan minut", "jedne minute"], mm: ["minut", "minute", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mesec", "meseca", "meseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function (e, t) { return e === 1 ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2] }, translate: function (e, n, r) { var i = t.words[r]; if (r.length === 1) { return n ? i[0] : i[1] } else { return e + " " + t.correctGrammaticalCase(e, i) } } }; return e.defineLocale("sr", { months: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"], monthsShort: ["jan.", "feb.", "mar.", "apr.", "maj", "jun", "jul", "avg.", "sep.", "okt.", "nov.", "dec."], weekdays: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"], weekdaysShort: ["ned.", "pon.", "uto.", "sre.", "čet.", "pet.", "sub."], weekdaysMin: ["ne", "po", "ut", "sr", "če", "pe", "su"], longDateFormat: { LT: "H:mm", LTS: "LT:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY LT", LLLL: "dddd, D. MMMM YYYY LT" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedelju] [u] LT"; case 3: return "[u] [sredu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[juče u] LT", lastWeek: function () { var e = ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"]; return e[this.day()] }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", m: t.translate, mm: t.translate, h: t.translate, hh: t.translate, d: "dan", dd: t.translate, M: "mesec", MM: t.translate, y: "godinu", yy: t.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"), weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"), weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Igår] LT", nextWeek: "dddd LT", lastWeek: "[Förra] dddd[en] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "för %s sedan", s: "några sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en månad", MM: "%d månader", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}(e|a)/, ordinal: function (e) { var t = e % 10, n = ~~(e % 100 / 10) === 1 ? "e" : t === 1 ? "a" : t === 2 ? "a" : t === 3 ? "e" : "e"; return e + n }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("ta", { months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"), weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"), weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, LT", LLLL: "dddd, D MMMM YYYY, LT" }, calendar: { sameDay: "[இன்று] LT", nextDay: "[நாளை] LT", nextWeek: "dddd, LT", lastDay: "[நேற்று] LT", lastWeek: "[கடந்த வாரம்] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s இல்", past: "%s முன்", s: "ஒரு சில விநாடிகள்", m: "ஒரு நிமிடம்", mm: "%d நிமிடங்கள்", h: "ஒரு மணி நேரம்", hh: "%d மணி நேரம்", d: "ஒரு நாள்", dd: "%d நாட்கள்", M: "ஒரு மாதம்", MM: "%d மாதங்கள்", y: "ஒரு வருடம்", yy: "%d ஆண்டுகள்" }, ordinalParse: /\d{1,2}வது/, ordinal: function (e) { return e + "வது" }, meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/, meridiem: function (e, t, n) { if (e < 2) { return " யாமம்" } else if (e < 6) { return " வைகறை" } else if (e < 10) { return " காலை" } else if (e < 14) { return " நண்பகல்" } else if (e < 18) { return " எற்பாடு" } else if (e < 22) { return " மாலை" } else { return " யாமம்" } }, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "யாமம்") { return e < 2 ? e : e + 12 } else if (t === "வைகறை" || t === "காலை") { return e } else if (t === "நண்பகல்") { return e >= 10 ? e : e + 12 } else { return e + 12 } }, week: { dow: 0, doy: 6 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("th", { months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"), monthsShort: "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"), weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"), weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"), longDateFormat: { LT: "H นาฬิกา m นาที", LTS: "LT s วินาที", L: "YYYY/MM/DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY เวลา LT", LLLL: "วันddddที่ D MMMM YYYY เวลา LT" }, meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/, isPM: function (e) { return e === "หลังเที่ยง" }, meridiem: function (e, t, n) { if (e < 12) { return "ก่อนเที่ยง" } else { return "หลังเที่ยง" } }, calendar: { sameDay: "[วันนี้ เวลา] LT", nextDay: "[พรุ่งนี้ เวลา] LT", nextWeek: "dddd[หน้า เวลา] LT", lastDay: "[เมื่อวานนี้ เวลา] LT", lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT", sameElse: "L" }, relativeTime: { future: "อีก %s", past: "%sที่แล้ว", s: "ไม่กี่วินาที", m: "1 นาที", mm: "%d นาที", h: "1 ชั่วโมง", hh: "%d ชั่วโมง", d: "1 วัน", dd: "%d วัน", M: "1 เดือน", MM: "%d เดือน", y: "1 ปี", yy: "%d ปี" } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("tl-ph", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY LT", LLLL: "dddd, MMMM DD, YYYY LT" }, calendar: { sameDay: "[Ngayon sa] LT", nextDay: "[Bukas sa] LT", nextWeek: "dddd [sa] LT", lastDay: "[Kahapon sa] LT", lastWeek: "dddd [huling linggo] LT", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, ordinalParse: /\d{1,2}/, ordinal: function (e) { return e }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { var t = { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'üncü", 4: "'üncü", 100: "'üncü", 6: "'ncı", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'ıncı", 90: "'ıncı" }; return e.defineLocale("tr", { months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd, D MMMM YYYY LT" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[yarın saat] LT", nextWeek: "[haftaya] dddd [saat] LT", lastDay: "[dün] LT", lastWeek: "[geçen hafta] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/, ordinal: function (e) { if (e === 0) { return e + "'ıncı" } var n = e % 10, r = e % 100 - n, i = e >= 100 ? 100 : null; return e + (t[n] || t[r] || t[i]) }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("tzm-latn", { months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[asdkh g] LT", nextDay: "[aska g] LT", nextWeek: "dddd [g] LT", lastDay: "[assant g] LT", lastWeek: "dddd [g] LT", sameElse: "L" }, relativeTime: { future: "dadkh s yan %s", past: "yan %s", s: "imik", m: "minuḍ", mm: "%d minuḍ", h: "saɛa", hh: "%d tassaɛin", d: "ass", dd: "%d ossan", M: "ayowr", MM: "%d iyyirn", y: "asgas", yy: "%d isgasn" }, week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("tzm", { months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT" }, calendar: { sameDay: "[ⴰⵙⴷⵅ ⴴ] LT", nextDay: "[ⴰⵙⴽⴰ ⴴ] LT", nextWeek: "dddd [ⴴ] LT", lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT", lastWeek: "dddd [ⴴ] LT", sameElse: "L" }, relativeTime: { future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s", past: "ⵢⴰⵏ %s", s: "ⵉⵎⵉⴽ", m: "ⵎⵉⵏⵓⴺ", mm: "%d ⵎⵉⵏⵓⴺ", h: "ⵙⴰⵄⴰ", hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ", d: "ⴰⵙⵙ", dd: "%d oⵙⵙⴰⵏ", M: "ⴰⵢoⵓⵔ", MM: "%d ⵉⵢⵢⵉⵔⵏ", y: "ⴰⵙⴳⴰⵙ", yy: "%d ⵉⵙⴳⴰⵙⵏ" }, week: { dow: 6, doy: 12 } }) }); (function (e) { e(t) })(function (e) { function t(e, t) { var n = e.split("_"); return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2] } function n(e, n, r) { var i = { mm: "хвилина_хвилини_хвилин", hh: "година_години_годин", dd: "день_дні_днів", MM: "місяць_місяці_місяців", yy: "рік_роки_років" }; if (r === "m") { return n ? "хвилина" : "хвилину" } else if (r === "h") { return n ? "година" : "годину" } else { return e + " " + t(i[r], +e) } } function r(e, t) { var n = { nominative: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"), accusative: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_") }, r = /D[oD]? *MMMM?/.test(t) ? "accusative" : "nominative"; return n[r][e.month()] } function i(e, t) { var n = { nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"), accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"), genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_") }, r = /(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative"; return n[r][e.day()] } function s(e) { return function () { return e + "о" + (this.hours() === 11 ? "б" : "") + "] LT" } } return e.defineLocale("uk", { months: r, monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"), weekdays: i, weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY р.", LLL: "D MMMM YYYY р., LT", LLLL: "dddd, D MMMM YYYY р., LT" }, calendar: { sameDay: s("[Сьогодні "), nextDay: s("[Завтра "), lastDay: s("[Вчора "), nextWeek: s("[У] dddd ["), lastWeek: function () { switch (this.day()) { case 0: case 3: case 5: case 6: return s("[Минулої] dddd [").call(this); case 1: case 2: case 4: return s("[Минулого] dddd [").call(this) } }, sameElse: "L" }, relativeTime: { future: "за %s", past: "%s тому", s: "декілька секунд", m: n, mm: n, h: "годину", hh: n, d: "день", dd: n, M: "місяць", MM: n, y: "рік", yy: n }, meridiemParse: /ночі|ранку|дня|вечора/, isPM: function (e) { return /^(дня|вечора)$/.test(e) }, meridiem: function (e, t, n) { if (e < 4) { return "ночі" } else if (e < 12) { return "ранку" } else if (e < 17) { return "дня" } else { return "вечора" } }, ordinalParse: /\d{1,2}-(й|го)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": case "w": case "W": return e + "-й"; case "D": return e + "-го"; default: return e } }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("uz", { months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"), weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"), weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "D MMMM YYYY, dddd LT" }, calendar: { sameDay: "[Бугун соат] LT [да]", nextDay: "[Эртага] LT [да]", nextWeek: "dddd [куни соат] LT [да]", lastDay: "[Кеча соат] LT [да]", lastWeek: "[Утган] dddd [куни соат] LT [да]", sameElse: "L" }, relativeTime: { future: "Якин %s ичида", past: "Бир неча %s олдин", s: "фурсат", m: "бир дакика", mm: "%d дакика", h: "бир соат", hh: "%d соат", d: "бир кун", dd: "%d кун", M: "бир ой", MM: "%d ой", y: "бир йил", yy: "%d йил" }, week: { dow: 1, doy: 7 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("vi", { months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"), monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"), weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), longDateFormat: { LT: "HH:mm", LTS: "LT:ss", L: "DD/MM/YYYY", LL: "D MMMM [năm] YYYY", LLL: "D MMMM [năm] YYYY LT", LLLL: "dddd, D MMMM [năm] YYYY LT", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY LT", llll: "ddd, D MMM YYYY LT" }, calendar: { sameDay: "[Hôm nay lúc] LT", nextDay: "[Ngày mai lúc] LT", nextWeek: "dddd [tuần tới lúc] LT", lastDay: "[Hôm qua lúc] LT", lastWeek: "dddd [tuần rồi lúc] LT", sameElse: "L" }, relativeTime: { future: "%s tới", past: "%s trước", s: "vài giây", m: "một phút", mm: "%d phút", h: "một giờ", hh: "%d giờ", d: "một ngày", dd: "%d ngày", M: "một tháng", MM: "%d tháng", y: "một năm", yy: "%d năm" }, ordinalParse: /\d{1,2}/, ordinal: function (e) { return e }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("zh-cn", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah点mm", LTS: "Ah点m分s秒", L: "YYYY-MM-DD", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日LT", LLLL: "YYYY年MMMD日ddddLT", l: "YYYY-MM-DD", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日LT", llll: "YYYY年MMMD日ddddLT" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "凌晨" || t === "早上" || t === "上午") { return e } else if (t === "下午" || t === "晚上") { return e + 12 } else { return e >= 11 ? e : e + 12 } }, meridiem: function (e, t, n) { var r = e * 100 + t; if (r < 600) { return "凌晨" } else if (r < 900) { return "早上" } else if (r < 1130) { return "上午" } else if (r < 1230) { return "中午" } else if (r < 1800) { return "下午" } else { return "晚上" } }, calendar: { sameDay: function () { return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT" }, nextDay: function () { return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT" }, lastDay: function () { return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT" }, nextWeek: function () { var t, n; t = e().startOf("week"); n = this.unix() - t.unix() >= 7 * 24 * 3600 ? "[下]" : "[本]"; return this.minutes() === 0 ? n + "dddAh点整" : n + "dddAh点mm" }, lastWeek: function () { var t, n; t = e().startOf("week"); n = this.unix() < t.unix() ? "[上]" : "[本]"; return this.minutes() === 0 ? n + "dddAh点整" : n + "dddAh点mm" }, sameElse: "LL" }, ordinalParse: /\d{1,2}(日|月|周)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; case "M": return e + "月"; case "w": case "W": return e + "周"; default: return e } }, relativeTime: { future: "%s内", past: "%s前", s: "几秒", m: "1分钟", mm: "%d分钟", h: "1小时", hh: "%d小时", d: "1天", dd: "%d天", M: "1个月", MM: "%d个月", y: "1年", yy: "%d年" }, week: { dow: 1, doy: 4 } }) }); (function (e) { e(t) })(function (e) { return e.defineLocale("zh-tw", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah點mm", LTS: "Ah點m分s秒", L: "YYYY年MMMD日", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日LT", LLLL: "YYYY年MMMD日ddddLT", l: "YYYY年MMMD日", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日LT", llll: "YYYY年MMMD日ddddLT" }, meridiemParse: /早上|上午|中午|下午|晚上/, meridiemHour: function (e, t) { if (e === 12) { e = 0 } if (t === "早上" || t === "上午") { return e } else if (t === "中午") { return e >= 11 ? e : e + 12 } else if (t === "下午" || t === "晚上") { return e + 12 } }, meridiem: function (e, t, n) { var r = e * 100 + t; if (r < 900) { return "早上" } else if (r < 1130) { return "上午" } else if (r < 1230) { return "中午" } else if (r < 1800) { return "下午" } else { return "晚上" } }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, ordinalParse: /\d{1,2}(日|月|週)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; case "M": return e + "月"; case "w": case "W": return e + "週"; default: return e } }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", m: "一分鐘", mm: "%d分鐘", h: "一小時", hh: "%d小時", d: "一天", dd: "%d天", M: "一個月", MM: "%d個月", y: "一年", yy: "%d年" } }) }); t.locale("en"); if (g) { module.exports = t } else if (typeof define === "function" && define.amd) { define(function (e, n, s) { if (s.config && s.config() && s.config().noGlobal === true) { r.moment = i } return t }); Sn(true) } else { Sn() } }).call(this)